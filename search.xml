<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android代码混淆]]></title>
      <url>http://beginlu.me/2017/05/19/Android%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
      <content type="html"><![CDATA[<p>##Android中的代码混淆</p>
<p>####代码混淆的意义<br>Android应用程序基本是使用JAVA语言进行开发，JAVA编译后的class文件又十分容易被反编译的，所以为了保护源代码，需要对编译后的class文件进行混淆</p>
<p>####混淆的过程<br>Android所使用的代码混淆方案是ProGuard。ProGuard包含了以下几个功能</p>
<ol>
<li>压缩：检测和移除封装应用中未使用的类、字段、方法和属性</li>
<li>优化：优化字节码，移除未使用的代码指令</li>
<li>混淆：用短名称混淆其余的类、字段和方法</li>
<li>预检：确保class文件是可执行的</li>
</ol>
<p>####要注意的地方<br>ProGuard压缩的原理类似于JVM垃圾回收机制中的标记-清除法。同样由一个入口点开始进行遍历，查找哪些类和类成员在使用，而未被使用的则会被抛弃。</p>
<p>这时候会出现一些问题，比如JNI中调用的方法和反射到的类以及WebView中调用的JS方法等等。这些都是无法被遍历到的，还有一部分是由于在XML等其他配置文件中有配置的比如四大组件，自定义View等。而这些就需要通过配置文件进行处理。</p>
<p>需要在配置文件中配置的类型：</p>
<ul>
<li>四大组件</li>
<li>自定义View</li>
<li>R文件</li>
<li>JNI调用的方法</li>
<li>反射用到的类</li>
<li>WebView中JavaScript调用的方法</li>
<li>枚举类型</li>
<li>Parcelable</li>
<li>Serializable</li>
<li>第三方包</li>
</ul>
<p>在配置文件中还有一些设置项，包括混淆优化次数，混淆算法，混淆替换规则之类的。</p>
<p>####混淆输出的文件<br>在混淆结束后会在mapping文件夹中生成四个文件</p>
<ul>
<li><code>dump.txt</code> 说明 APK 中所有类文件的内部结构。</li>
<li><code>mapping.txt</code> 提供原始与混淆过的类、方法和字段名称之间的转换。</li>
<li><code>seeds.txt</code> 列出未进行混淆的类和成员。</li>
<li><code>usage.txt</code> 列出从 APK 移除的代码。</li>
</ul>
<p>####假装是总结<br>代码混淆主要就是让反编译后的代码变得更难以阅读，但是有心的话依然还是可以破解。所以我个人感觉一些非常重要的涉及到安全性的代码不应该放在客户端。当然如果是为了避免被重新套壳上架这样的。可以考虑DexGuard应用加固技术。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016年总结]]></title>
      <url>http://beginlu.me/2017/01/08/2016%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="2016年总结"><a href="#2016年总结" class="headerlink" title="2016年总结"></a>2016年总结</h1><blockquote>
<p>不为繁华易匠心</p>
</blockquote>
<p>我一直没有忘记这句话。</p>
<p>今年上半年我学习了spring mvc和hibernate框架。也误以为自己会java web了，现在感觉后端这东西就是学的越多越复杂，从最初的写两个动态页面，到数据爬虫，到现在数据库设计等等等等，我感觉我都还只是在入门阶段而已，但是今年我就要去找实习工作了，很难再分出心来学java web，但是我还是希望我能在后端上走的更远一些。</p>
<p>今年暑假就是学了一些android知识吧。补了一些基础知识，例如多进程通信，view的事件传递机制，activity的启动模式，内存泄漏分析这样的东西。怎么说呢，前一个月刚好学校教了一个月的iOS开发，我也算了解了一些iOS的知识吧，感觉移动端开发入门门槛真的很低，但是如果要深入下去，也是非常困难的。</p>
<p>今年下半年还好好的补了一些java基础和设计模式吧，大学那么多年，一直觉得自己java基础很差，每年总会好好的去学一遍java，感觉每次都会有新的收获，其实还是挺不错的呢。但是设计模式怎么说呢，真的很重要！非常重要！特别重要！我这次寒假还特意把设计模式的书带回来再看一遍了。以前做项目感觉就是在堆砖，代码又臭又难看，完全就是因为不太会设计模式的原因，我寒假一定要再看一遍设计模式。</p>
<p>老样子，感觉今年也是没学什么东西，今年收获最大的应该就是为一个初创公司独立完成了一个后台吧，体验到了一个系统在设计时的重要性，感受到了数据库设计的重要性，也体会到了客户各种千奇百怪的要求。2017年，就要去实习了，希望我能在最后的这点时间里好好的学一学设计模式和UML。</p>
<p>说到UML我就不得不吐槽了，我一个学了三年java的人居然面向对象设计与分析挂了，外教随缘挂人真可怕。</p>
<p>其实，还想说一说自己，不知道为什么就快要离开学校了，至今还是个单身狗，唉。</p>
<p>不扯这些没用的。2017年我要学好android！争取进一家满意的实习公司！加油！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[内存泄漏 和 内存溢出]]></title>
      <url>http://beginlu.me/2016/11/21/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%20%E5%92%8C%20%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</url>
      <content type="html"><![CDATA[<h1 id="内存泄漏-和-内存溢出"><a href="#内存泄漏-和-内存溢出" class="headerlink" title="内存泄漏 和 内存溢出"></a>内存泄漏 和 内存溢出</h1><div markdown="1" style="margin-top: 0; margin-right: 0; margin-bottom: 1.2em; margin-left: 0;"><br><br><div markdown="1" style="display: inline-block; vertical-align: baseline; line-height: 1; margin-top: 0em; margin-right: 0.125em; margin-bottom: 0em; margin-left: 0.125em; background-color: #e8e8e8; border-color: #e8e8e8; background-image: none; padding-top: 0.6em; padding-right: 0.8em; padding-bottom: 0.6em; padding-left: 0.8em; color: rgba(0 , 0 , 0 , 0.6); text-transform: none; font-weight: bold; border-radius: 0.2857rem; box-sizing: border-box; font-size: 0.7428rem;"><br><br>Java</div>

<div markdown="1" style="display: inline-block; vertical-align: baseline; line-height: 1; margin-top: 0em; margin-right: 0.125em; margin-bottom: 0em; margin-left: 0.125em; background-color: #e8e8e8; border-color: #e8e8e8; background-image: none; padding-top: 0.6em; padding-right: 0.8em; padding-bottom: 0.6em; padding-left: 0.8em; color: rgba(0 , 0 , 0 , 0.6); text-transform: none; font-weight: bold; border-radius: 0.2857rem; box-sizing: border-box; font-size: 0.7428rem;"><br><br>Android</div>

<p></p></div><p></p>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>Java内存泄漏指的是进程中某些对象（垃圾对象）已经没有使用价值了，但是它们却可以直接或间接地引用到gc roots导致无法被GC回收。无用的对象占据着内存空间，使得实际可使用内存变小，形象地说法就是内存泄漏了。</p>
<h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><p>如果应用程序在消耗光了所有的可用堆空间(16M到48M），那么再试图在堆上分配新对象时就会引起OOM(Out Of Memory Error)异常。</p>
<h2 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h2><table style="max-width: 100%; background-color: transparent; border-collapse: collapse; border-spacing: 0; border: 1px solid rgba(34 , 36 , 38 , .15); width: 100%; margin-bottom: 20px;"><br><br><thead><br><tr><br><th style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: bottom; border-top: 0; font-weight: bold; border-left: none;">引用名称</th><br><th style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: bottom; border-top: 0; font-weight: bold; border-left: 1px solid rgba(34 , 36 , 38 , .1);">强引用</th><br><th style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: bottom; border-top: 0; font-weight: bold; border-left: 1px solid rgba(34 , 36 , 38 , .1);">软引用</th><br><th style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: bottom; border-top: 0; font-weight: bold; border-left: 1px solid rgba(34 , 36 , 38 , .1);">虚引用</th><br><th style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: bottom; border-top: 0; font-weight: bold; border-left: 1px solid rgba(34 , 36 , 38 , .1);">弱引用</th><br></tr><br></thead><br><tbody><br><tr><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; background-color: #f9f9f9; border-left: none;">引用特点</td><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; background-color: #f9f9f9; border-left: 1px solid rgba(34 , 36 , 38 , .1);">Strong ref 具有强可达性，除非去掉强可达性，否则不会被回收</td><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; background-color: #f9f9f9; border-left: 1px solid rgba(34 , 36 , 38 , .1);">Soft ref具有软可达性，当内存吃紧且不存在Strong Ref时会被回收</td><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; background-color: #f9f9f9; border-left: 1px solid rgba(34 , 36 , 38 , .1);">比Soft Ref更弱，当不存在Strong Ref时，立刻回收对象，不需要等到内存吃紧时</td><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; background-color: #f9f9f9; border-left: 1px solid rgba(34 , 36 , 38 , .1);">根本不会在内存中保持任何对象，你只能使用Phantom Ref本身。一般用于在进入finalize()方法后进行特殊的清理过程</td><br></tr><br><tr><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; border-left: none;">引用方式</td><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; border-left: 1px solid rgba(34 , 36 , 38 , .1);"></td><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; border-left: 1px solid rgba(34 , 36 , 38 , .1);">SoftReference</td><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; border-left: 1px solid rgba(34 , 36 , 38 , .1);">WeakReference和WeakHashMap</td><br><td style="padding-top: 8px; padding-right: 8px; padding-bottom: 8px; padding-left: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #dddddd; border-left: 1px solid rgba(34 , 36 , 38 , .1);">PhantomReference</td><br></tr><br></tbody><br><br></table>


<h2 id="出现的情况"><a href="#出现的情况" class="headerlink" title="出现的情况"></a>出现的情况</h2><h4 id="非静态内部类的静态实例"><a href="#非静态内部类的静态实例" class="headerlink" title="非静态内部类的静态实例"></a>非静态内部类的静态实例</h4><h4 id="持有Context引用"><a href="#持有Context引用" class="headerlink" title="持有Context引用"></a>持有Context引用</h4><h4 id="线程之间通过Handler通信"><a href="#线程之间通过Handler通信" class="headerlink" title="线程之间通过Handler通信"></a>线程之间通过Handler通信</h4><h4 id="变量作用域设置过大"><a href="#变量作用域设置过大" class="headerlink" title="变量作用域设置过大"></a>变量作用域设置过大</h4><h4 id="构造Adapter时未使用convertView"><a href="#构造Adapter时未使用convertView" class="headerlink" title="构造Adapter时未使用convertView"></a>构造Adapter时未使用convertView</h4><h4 id="Bitmap未被回收和置空"><a href="#Bitmap未被回收和置空" class="headerlink" title="Bitmap未被回收和置空"></a>Bitmap未被回收和置空</h4><h4 id="资源对象（Cursor、File等）未关闭"><a href="#资源对象（Cursor、File等）未关闭" class="headerlink" title="资源对象（Cursor、File等）未关闭"></a>资源对象（Cursor、File等）未关闭</h4><h4 id="注册的对象未取消"><a href="#注册的对象未取消" class="headerlink" title="注册的对象未取消"></a>注册的对象未取消</h4><h4 id="集合容器对象没清理造成的内存泄露"><a href="#集合容器对象没清理造成的内存泄露" class="headerlink" title="集合容器对象没清理造成的内存泄露"></a>集合容器对象没清理造成的内存泄露</h4><h4 id="webView未被销毁"><a href="#webView未被销毁" class="headerlink" title="webView未被销毁"></a>webView未被销毁</h4><h4 id="GridView的滥用"><a href="#GridView的滥用" class="headerlink" title="GridView的滥用"></a>GridView的滥用</h4><div markdown="1" style="display:none;"><br><en-media type="application/octet-stream" hash="f24a1d9db13d51e5c840f46dc15194f0"><br><br></en-media></div>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HashMap原理]]></title>
      <url>http://beginlu.me/2016/11/19/HashMap%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="HashMap原理"><a href="#HashMap原理" class="headerlink" title="HashMap原理"></a>HashMap原理</h1><div markdown="1" style="margin-top: 0; margin-right: 0; margin-bottom: 1.2em; margin-left: 0;"><br><br><div markdown="1" style="display: inline-block; vertical-align: baseline; line-height: 1; margin-top: 0em; margin-right: 0.125em; margin-bottom: 0em; margin-left: 0.125em; background-color: #e8e8e8; border-color: #e8e8e8; background-image: none; padding-top: 0.6em; padding-right: 0.8em; padding-bottom: 0.6em; padding-left: 0.8em; color: rgba(0 , 0 , 0 , 0.6); text-transform: none; font-weight: bold; border-radius: 0.2857rem; box-sizing: border-box; font-size: 0.7428rem;"><br><br>Java</div>

<p></p></div><p></p>
<h1 id="HashMap原理-1"><a href="#HashMap原理-1" class="headerlink" title="HashMap原理"></a>HashMap原理</h1><h3 id="HashMap的优点"><a href="#HashMap的优点" class="headerlink" title="HashMap的优点"></a>HashMap的优点</h3><p>结合了链表操作方便和线性表操作迅速的特点</p>
<h3 id="HashMap存储结构"><a href="#HashMap存储结构" class="headerlink" title="HashMap存储结构"></a>HashMap存储结构</h3><blockquote>
<p>拉链法</p>
</blockquote>
<div markdown="1" style="text-align: center;"><br><br><div markdown="1" style="display: inline-block; position: relative; max-width: 80%;"><br><en-media type="image/png" style="height: auto; max-width: 100%; vertical-align: middle; border: 0; border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34 , 36 , 38 , .12) , 0 2px 10px 0 rgba(34 , 36 , 38 , .08);" hash="0987940e53cc7783b97357dea76b398c"><br><br></en-media></div>


<div markdown="1" style="border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 10px;"><br><br>1479536844210.jpg</div>

<p></p></div><p></p>
<p>HashMap是由一个线性表（数组）和一些链表组成的.</p>
<h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><p><code>index = hash%entry[].length;</code><br>如果两个hash有相同的key则会将后进入表中的数据放在链表的首位</p>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p><code>index = hash%entry[].lenght</code><br>同样的方式得到hash的index后遍历链表取值</p>
<div markdown="1" style="display:none;"><br><en-media type="application/octet-stream" hash="bd071a0c6a37f945247b5216c3bafdd5"><br><br></en-media></div>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java的垃圾回收机制]]></title>
      <url>http://beginlu.me/2016/11/19/Java%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<div markdown="1" style="margin: 10px 0px; padding: 0px; font-family: " microsoft="" yahei",="" arial,="" "courier="" new",="" courier,="" 宋体,="" monospace;="" font-size:="" 16px;="" color:="" rgb(51,="" 51,="" 51);="" font-style:="" normal;="" font-variant-ligatures:="" font-variant-caps:="" font-weight:="" letter-spacing:="" orphans:="" 2;="" text-align:="" start;="" text-indent:="" 0px;="" text-transform:="" none;="" widows:="" word-spacing:="" -webkit-text-stroke-width:="" background-color:="" rgb(255,="" 255,="" 255);="" min-height:="" 55px;"=""><br><br>Java的<a href="https://www.baidu.com/s?wd=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YdrHndPvuWmWNWPhcknvm10ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnHT4nj61nWb3" target="_blank" rel="external">垃圾回收</a>机制是Java虚拟机提供的能力，用于在空闲时间以不定时的方式动态回收无任何引用的对象占据的内存空间。<br>需要注意的是：<a href="https://www.baidu.com/s?wd=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YdrHndPvuWmWNWPhcknvm10ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnHT4nj61nWb3" target="_blank" rel="external">垃圾回收</a>回收的是无任何引用的对象占据的内存空间而不是对象本身，很多人来我公司面试时，我都会问这个问题的，70%以上的人回答的含义是回收对象，实际上这是不正确的。<br>System.gc()<br>Runtime.getRuntime().gc()<br>上面的方法调用时用于显式通知JVM可以进行一次<a href="https://www.baidu.com/s?wd=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YdrHndPvuWmWNWPhcknvm10ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnHT4nj61nWb3" target="_blank" rel="external">垃圾回收</a>，但真正垃圾回收机制具体在什么时间点开始发生动作这同样是不可预料的，这和抢占式的线程在发生作用时的原理一样。<br></div>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象三大基本特性，五大基本原则]]></title>
      <url>http://beginlu.me/2016/11/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7%EF%BC%8C%E4%BA%94%E5%A4%A7%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<h1 id="面向对象三大基本特性-五大基本原则"><a href="#面向对象三大基本特性-五大基本原则" class="headerlink" title="面向对象三大基本特性,五大基本原则"></a><a href="http://www.cnblogs.com/hnrainll/archive/2012/09/18/2690846.html" target="_blank" rel="external">面向对象三大基本特性,五大基本原则</a></h1><div markdown="1" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-size: 14px; font-family: 'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.301961); -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><br><br><div markdown="1" style="margin: 0px 0px 20px; padding: 0px; word-break: break-word;"><br><br>透切理解面向对象三大基本特性是理解面向对象五大基本原则的基础.<br><br><br>三大特性是：封装,继承,多态<br><br>所谓封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。封装是面向对象的特征之一，是对象和类概念的主要特性。 简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。<br><br><br>所谓继承是指可以让某个类型的对象获得另一个类型的对象的属性的方法。它支持按级分类的概念。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；<br><br>所谓多态就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。<br><br><br>五大基本原则<br>单一职责原则SRP(Single Responsibility Principle)<br>是指一个类的功能要单一，不能包罗万象。如同一个人一样，分配的工作不能太多，否则一天到晚虽然忙忙碌碌的，但效率却高不起来。<br><br>开放封闭原则OCP(Open－Close Principle)<br>一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，<br>那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。<br><br>替换原则(the Liskov Substitution Principle LSP)<br>子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，<br>也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。<br><br>依赖原则(the Dependency Inversion Principle DIP) 具体依赖抽象，上层依赖下层。假设B是较A低的模块，但B需要使用到A的功能，<br>这个时候，B不应当直接使用A中的具体类： 而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到<br>了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。一个常见的问题就是编译A模块时需要直接包含到B模块的cpp文件，而编译B时同样要直接包含到A的cpp文件。<br><br>接口分离原则(the Interface Segregation Principle ISP)<br>模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来<br><br></div>

<p></p></div><p></p>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntentFilter匹配规则]]></title>
      <url>http://beginlu.me/2016/11/12/IntentFilter%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<p><del><a href="http://maxiang.info/#/?provider=evernote&amp;guid=101d418c-e707-4d4b-a9f6-0c506ebc7698&amp;notebook=%E9%BB%98%E8%AE%A4%E7%AC%94%E8%AE%B0%E6%9C%AC" target="_blank" rel="external">Edit</a></del><div markdown="1" style="color: #2c3f51; font-family: 'Helvetica Neue', Arial, 'Hiragino Sans GB', STHeiti, 'Microsoft YaHei', 'WenQuanYi Micro Hei', SimSun, Song, sans-serif; line-height: 1.6;"></div></p>
<h1 id="IntentFilter匹配规则"><a href="#IntentFilter匹配规则" class="headerlink" title="IntentFilter匹配规则"></a>IntentFilter匹配规则</h1><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p>一个过滤规则中可以有多个action规则.Intent中的action能够和过滤规则中的任意一个action规则相同即可匹配成功.</p>
<h4 id="category"><a href="#category" class="headerlink" title="category"></a>category</h4><p>Intent中可以没有category.如果有的话就比如和过滤规则中的任意一个匹配.</p>
<ul>
<li>category的过滤规则中必须加上<code>android.intent.category.DEFAULT</code></li>
</ul>
<p>因为intent中没有category中没有category时会具有一个默认的category.就是<code>android.intent.category.DEFAULT</code></p>
<h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><p>data语法如下</p>
<pre><code>&lt;data android:scheme=&quot;string&quot;  
    android:host=&quot;string&quot;  
    android:port=&quot;string&quot;  
    android:path=&quot;string&quot;  
    android:pathPattern=&quot;string&quot;  
    android:pathPrefix=&quot;string&quot;  
    android:mimeType=&quot;string&quot; /&gt;  
</code></pre><p>URI结构</p>
<pre><code>* scheme的默认值为file或content  
* setData和setType方法会相互清除对方的值.需要调用setDataAndType方法  
</code></pre><h3 id="启动单个Intent"><a href="#启动单个Intent" class="headerlink" title="启动单个Intent"></a>启动单个Intent</h3><pre><code>Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  
intent.setType(&quot;image/*&quot;);  
Intent chooserIntent = Intent.createChooser(intent,&quot;PIC&quot;);  
startActivityForResult(chooserIntent,10);  
</code></pre><h3 id="启动多个Intent"><a href="#启动多个Intent" class="headerlink" title="启动多个Intent"></a>启动多个Intent</h3><pre><code>Intent picIntent = new Intent(Intent.ACTION_GET_CONTENT);  
picIntent.setType(&quot;image/*&quot;);  

Intent takePhotoIntent;  
takePhotoIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  
Intent chooserIntent = Intent.createChooser(picIntent,&quot;PIC&quot;);  
chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{takePhotoIntent});  

startActivityForResult(chooserIntent,10);  
</code></pre><p></p>
<p>%23IntentFilter%u5339%u914D%u89C4%u5219%0A%23%23%23%23action%0A%u4E00%u4E2A%u8FC7%u6EE4%u89C4%u5219%u4E2D%u53EF%u4EE5%u6709%u591A%u4E2Aaction%u89C4%u5219.Intent%u4E2D%u7684action%u80FD%u591F%u548C%u8FC7%u6EE4%u89C4%u5219%u4E2D%u7684%u4EFB%u610F%u4E00%u4E2Aaction%u89C4%u5219%u76F8%u540C%u5373%u53EF%u5339%u914D%u6210%u529F.%0A%23%23%23%23category%0AIntent%u4E2D%u53EF%u4EE5%u6CA1%u6709category.%u5982%u679C%u6709%u7684%u8BDD%u5C31%u6BD4%u5982%u548C%u8FC7%u6EE4%u89C4%u5219%u4E2D%u7684%u4EFB%u610F%u4E00%u4E2A%u5339%u914D.%0A<em>%20category%u7684%u8FC7%u6EE4%u89C4%u5219%u4E2D%u5FC5%u987B%u52A0%u4E0A%60%60%60android.intent.category.DEFAULT%60%60%60%0A%0A%u56E0%u4E3Aintent%u4E2D%u6CA1%u6709category%u4E2D%u6CA1%u6709category%u65F6%u4F1A%u5177%u6709%u4E00%u4E2A%u9ED8%u8BA4%u7684category.%u5C31%u662F%60%60%60android.intent.category.DEFAULT%60%60%60%0A%23%23%23%23data%0Adata%u8BED%u6CD5%u5982%u4E0B%0A%60%60%60xml%0A%3Cdata%20android%3Ascheme%3D%22string%22%0A%09android%3Ahost%3D%22string%22%0A%09android%3Aport%3D%22string%22%0A%09android%3Apath%3D%22string%22%0A%09android%3ApathPattern%3D%22string%22%0A%09android%3ApathPrefix%3D%22string%22%0A%09android%3AmimeType%3D%22string%22%20/%3E%0A%60%60%60%0AURI%u7ED3%u6784%0A%0A%60%60%60%3Cscheme%3E%3A//%3Chost%3E%3A%3Cport%3E/%5B%3Cpath%3E%7C%3CpathPrefix%3E%7C%3CpathPattern%3E%5D%60%60%60%0A</em>%20scheme%u7684%u9ED8%u8BA4%u503C%u4E3Afile%u6216content%0A<em>%20setData%u548CsetType%u65B9%u6CD5%u4F1A%u76F8%u4E92%u6E05%u9664%u5BF9%u65B9%u7684%u503C.%u9700%u8981%u8C03%u7528setDataAndType%u65B9%u6CD5%0A%60%60%60%0A%0A%23%23%23%u542F%u52A8%u5355%u4E2AIntent%0A%0A%60%60%60java%0AIntent%20intent%20%3D%20new%20Intent%28MediaStore.ACTION_IMAGE_CAPTURE%29%3B%0Aintent.setType%28%22image/</em>%22%29%3B%0AIntent%20chooserIntent%20%3D%20Intent.createChooser%28intent%2C%22PIC%22%29%3B%0AstartActivityForResult%28chooserIntent%2C10%29%3B%0A%60%60%60%0A%0A%23%23%23%u542F%u52A8%u591A%u4E2AIntent%0A%60%60%60java%0AIntent%20picIntent%20%3D%20new%20Intent%28Intent.ACTION_GET_CONTENT%29%3B%0ApicIntent.setType%28%22image/*%22%29%3B%0A%0AIntent%20takePhotoIntent%3B%0AtakePhotoIntent%20%3D%20new%20Intent%28MediaStore.ACTION_IMAGE_CAPTURE%29%3B%0AIntent%20chooserIntent%20%3D%20Intent.createChooser%28picIntent%2C%22PIC%22%29%3B%0AchooserIntent.putExtra%28Intent.EXTRA_INITIAL_INTENTS%2Cnew%20Intent%5B%5D%7BtakePhotoIntent%7D%29%3B%0A%0AstartActivityForResult%28chooserIntent%2C10%29%3B%0A%60%60%60  </p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Activity的启动模式]]></title>
      <url>http://beginlu.me/2016/11/10/Activity%E7%9A%84%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><del><a href="http://maxiang.info/#/?provider=evernote&amp;guid=dfc889c4-b90d-4a8f-8dc6-59896b675c0f&amp;notebook=" target="_blank" rel="external">Edit</a></del><div markdown="1" style="color: #2c3f51; font-family: 'Helvetica Neue', Arial, 'Hiragino Sans GB', STHeiti, 'Microsoft YaHei', 'WenQuanYi Micro Hei', SimSun, Song, sans-serif; line-height: 1.6;"></div></p>
<h1 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h1><p>Android中activity有四种启动模式 <strong>standard</strong>、<strong>singleTop</strong>、<strong>singleTask</strong>、<strong>singleInstance</strong></p>
<h2 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h2><p>标准模式，也就是默认的启动模式。每次使用该模式启动activity时都会重新创建一个新的实例并将该实例存入启动该activity所在的任务栈中。</p>
<h2 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h2><p>栈顶复用模式，如果启动的activity位于任务栈的栈顶，就不会创建一个新的实例，而是调用该实例的onNewIntent方法，此时不会调用该实例的onCreate和onStart方法。如果该实例在任务栈中不存在或不位于栈顶，则会重新创建。</p>
<ul>
<li>任务栈 ABC 启动 D —-&gt; ABCD</li>
<li>任务栈 ABC 启动 C —-&gt; ABC</li>
<li>任务栈 ABC 启动 B —-&gt; ABCB</li>
</ul>
<h2 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h2><p>栈内复用模式，如果启动的activity位于任务栈中，就不会创建一个新的实例，而是将该实例调至栈顶并调用该实例的onNewIntent方法。如果该activity不位于任务栈中，则会创建一个新的实例。</p>
<ul>
<li>任务栈 ABC 启动 D —-&gt; ABCD</li>
<li>任务栈 ABC 启动 C —-&gt; ABC</li>
<li>任务栈 ABC 启动 B —-&gt; AB</li>
</ul>
<h2 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h2><p>单例模式，类似singleTask，但是具有该模式的activity只能位于一个单独的任务栈中。</p>
<h2 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h2><ul>
<li><p>前台任务栈 AB singleTask模式后台任务栈 CD   </p>
<ul>
<li>B 启动 D 前台任务栈 AB(CD) </li>
<li>B 启动 C 前台任务栈 AB(C)</li>
</ul>
</li>
<li><em>应用1</em> 启动了<em>应用2</em>的<strong>B</strong>后返回桌面启动<em>应用2</em>显示的是<strong>B</strong></li>
<li>有三个activity ABC A为standard模式 BC为singleTask模式 且taskAffinity与包名不相同 <table style="border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;">

</table></li>
</ul>
<p><thead style="line-height: 1.6;"></thead></p>
<p><tr style="line-height: 1.6;"><br>  <th style="font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;" align="center">操作</th><br>  <th style="font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;" align="center">任务栈1</th><br>  <th style="font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;" align="center">任务栈2</th><br>  <th style="font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6; text-align: center;" align="center">显示的Activity</th><br></tr><br></p>
<p><tbody style="line-height: 1.6;"><tr style="line-height: 1.6;"><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">启动A</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center"><br>  </td><td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br></tr></tbody></p>
<p><tr style="line-height: 1.6;"><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">启动B</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">B</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">B</td><br></tr></p>
<p><tr style="line-height: 1.6;"><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">启动C</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">BC</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">C</td><br></tr></p>
<p><tr style="line-height: 1.6;"><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">启动A</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">BC</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br></tr></p>
<p><tr style="line-height: 1.6;"><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">启动B</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">B</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">B</td><br></tr></p>
<p><tr style="line-height: 1.6;"><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">按back键</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center"><br>  </td><td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">A</td><br></tr></p>
<p><tr style="line-height: 1.6;"><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">再次按back键</td><br>  <td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center"><br>  </td><td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center"><br>  </td><td style="padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;" align="center">桌面</td><br></tr><br><br></p>
<h2 id="设置activity启动的两种姿势"><a href="#设置activity启动的两种姿势" class="headerlink" title="设置activity启动的两种姿势"></a>设置activity启动的两种姿势</h2><pre><code>&lt;activity android:name=&quot;.MainActivity&quot;  
      android:launchMode=&quot;singleTask&quot;/&gt;  



Intent intent = new Intent();  
intent.setClass(this,MainActivity.class);  
intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  
startActivity(intent);  
</code></pre><h2 id="Activity的FLAG"><a href="#Activity的FLAG" class="headerlink" title="Activity的FLAG"></a>Activity的FLAG</h2><h5 id="FLAG-ACTIVITY-NEW-TASK"><a href="#FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="FLAG_ACTIVITY_NEW_TASK"></a>FLAG_ACTIVITY_NEW_TASK</h5><p>栈内复用</p>
<h5 id="FLAG-ACTIVITY-SINGLE-TOP"><a href="#FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="FLAG_ACTIVITY_SINGLE_TOP"></a>FLAG_ACTIVITY_SINGLE_TOP</h5><p>等同于singleTop模式</p>
<h5 id="FLAG-ACTIVITY-CLEAR-TOP"><a href="#FLAG-ACTIVITY-CLEAR-TOP" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP"></a>FLAG_ACTIVITY_CLEAR_TOP</h5><p>具有该标记位的activity启动时会清空位于该activity上的所有实例 与FLAG_ACTIVITY_NEW_TASK共同使用时等同于singleTask</p>
<h5 id="FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</h5><p>具有该标记位的activity不会出现在历史activity列表当中</p>
<p></p>
<p>%23Activity%u7684%u542F%u52A8%u6A21%u5F0F%0AAndroid%u4E2Dactivity%u6709%u56DB%u79CD%u542F%u52A8%u6A21%u5F0F%20<strong>standard</strong>%u3001<strong>singleTop</strong>%u3001<strong>singleTask</strong>%u3001<strong>singleInstance</strong>%0A%23%23standard%0A%u6807%u51C6%u6A21%u5F0F%uFF0C%u4E5F%u5C31%u662F%u9ED8%u8BA4%u7684%u542F%u52A8%u6A21%u5F0F%u3002%u6BCF%u6B21%u4F7F%u7528%u8BE5%u6A21%u5F0F%u542F%u52A8activity%u65F6%u90FD%u4F1A%u91CD%u65B0%u521B%u5EFA%u4E00%u4E2A%u65B0%u7684%u5B9E%u4F8B%u5E76%u5C06%u8BE5%u5B9E%u4F8B%u5B58%u5165%u542F%u52A8%u8BE5activity%u6240%u5728%u7684%u4EFB%u52A1%u6808%u4E2D%u3002%0A%23%23singleTop%0A%u6808%u9876%u590D%u7528%u6A21%u5F0F%uFF0C%u5982%u679C%u542F%u52A8%u7684activity%u4F4D%u4E8E%u4EFB%u52A1%u6808%u7684%u6808%u9876%uFF0C%u5C31%u4E0D%u4F1A%u521B%u5EFA%u4E00%u4E2A%u65B0%u7684%u5B9E%u4F8B%uFF0C%u800C%u662F%u8C03%u7528%u8BE5%u5B9E%u4F8B%u7684onNewIntent%u65B9%u6CD5%uFF0C%u6B64%u65F6%u4E0D%u4F1A%u8C03%u7528%u8BE5%u5B9E%u4F8B%u7684onCreate%u548ConStart%u65B9%u6CD5%u3002%u5982%u679C%u8BE5%u5B9E%u4F8B%u5728%u4EFB%u52A1%u6808%u4E2D%u4E0D%u5B58%u5728%u6216%u4E0D%u4F4D%u4E8E%u6808%u9876%uFF0C%u5219%u4F1A%u91CD%u65B0%u521B%u5EFA%u3002%0A<em>%20%u4EFB%u52A1%u6808%20ABC%20%u542F%u52A8%20D%20—-%3E%20ABCD%0A</em>%20%u4EFB%u52A1%u6808%20ABC%20%u542F%u52A8%20C%20—-%3E%20ABC%0A<em>%20%u4EFB%u52A1%u6808%20ABC%20%u542F%u52A8%20B%20—-%3E%20ABCB%0A%23%23singleTask%0A%u6808%u5185%u590D%u7528%u6A21%u5F0F%uFF0C%u5982%u679C%u542F%u52A8%u7684activity%u4F4D%u4E8E%u4EFB%u52A1%u6808%u4E2D%uFF0C%u5C31%u4E0D%u4F1A%u521B%u5EFA%u4E00%u4E2A%u65B0%u7684%u5B9E%u4F8B%uFF0C%u800C%u662F%u5C06%u8BE5%u5B9E%u4F8B%u8C03%u81F3%u6808%u9876%u5E76%u8C03%u7528%u8BE5%u5B9E%u4F8B%u7684onNewIntent%u65B9%u6CD5%u3002%u5982%u679C%u8BE5activity%u4E0D%u4F4D%u4E8E%u4EFB%u52A1%u6808%u4E2D%uFF0C%u5219%u4F1A%u521B%u5EFA%u4E00%u4E2A%u65B0%u7684%u5B9E%u4F8B%u3002%0A</em>%20%u4EFB%u52A1%u6808%20ABC%20%u542F%u52A8%20D%20—-%3E%20ABCD%0A<em>%20%u4EFB%u52A1%u6808%20ABC%20%u542F%u52A8%20C%20—-%3E%20ABC%0A</em>%20%u4EFB%u52A1%u6808%20ABC%20%u542F%u52A8%20B%20—-%3E%20AB%0A%23%23singleInstance%0A%u5355%u4F8B%u6A21%u5F0F%uFF0C%u7C7B%u4F3CsingleTask%uFF0C%u4F46%u662F%u5177%u6709%u8BE5%u6A21%u5F0F%u7684activity%u53EA%u80FD%u4F4D%u4E8E%u4E00%u4E2A%u5355%u72EC%u7684%u4EFB%u52A1%u6808%u4E2D%u3002%0A%0A%23%23%u51E0%u4E2A%u4F8B%u5B50%0A<em>%20%u524D%u53F0%u4EFB%u52A1%u6808%20AB%20%20singleTask%u6A21%u5F0F%u540E%u53F0%u4EFB%u52A1%u6808%20CD%20%0A%09</em>%20B%20%u542F%u52A8%20D%20%u524D%u53F0%u4EFB%u52A1%u6808%20AB%28CD%29%20%0A%09<em>%20B%20%u542F%u52A8%20C%20%u524D%u53F0%u4EFB%u52A1%u6808%20AB%28C%29%0A</em>%20<em>%u5E94%u75281</em>%20%u542F%u52A8%u4E86<em>%u5E94%u75282</em>%u7684<strong>B</strong>%u540E%u8FD4%u56DE%u684C%u9762%u542F%u52A8<em>%u5E94%u75282</em>%u663E%u793A%u7684%u662F<strong>B</strong>%0A*%20%u6709%u4E09%u4E2Aactivity%20ABC%20A%u4E3Astandard%u6A21%u5F0F%20BC%u4E3AsingleTask%u6A21%u5F0F%20%u4E14taskAffinity%u4E0E%u5305%u540D%u4E0D%u76F8%u540C%20%0A%7C%20%u64CD%u4F5C%20%20%20%20%20%20%20%7C%20%u4EFB%u52A1%u68081%20%7C%20%u4EFB%u52A1%u68082%20%7C%u663E%u793A%u7684Activity%7C%0A%7C%20%3A——–%3A%20%7C%20%3A—-%3A%7C%20%3A—-%3A%20%7C%3A———–%3A%7C%0A%7C%20%u542F%u52A8A%20%20%20%20%20%20%7C%20%20%20A%20%20%20%20%7C%20%20%20%20%20%20%20%20%7C%20%20%20%20%20A%20%20%20%20%20%20%20%7C%0A%7C%20%u542F%u52A8B%20%20%20%20%20%20%7C%20%20%20A%20%20%20%20%7C%20%20%20%20%20B%20%20%7C%20%20%20%20%20B%20%20%20%20%20%20%20%7C%0A%7C%20%u542F%u52A8C%20%20%20%20%20%20%7C%20%20%20A%20%20%20%20%7C%20%20%20%20BC%20%20%7C%20%20%20%20%20C%20%20%20%20%20%20%20%7C%0A%7C%20%u542F%u52A8A%20%20%20%20%20%20%7C%20%20%20A%20%20%20%20%7C%20%20%20%20BC%20%20%7C%20%20%20%20%20A%20%20%20%20%20%20%20%7C%0A%7C%20%u542F%u52A8B%20%20%20%20%20%20%7C%20%20%20A%20%20%20%20%7C%20%20%20%20B%20%20%20%7C%20%20%20%20%20B%20%20%20%20%20%20%20%7C%0A%7C%20%u6309back%u952E%20%20%20%7C%20%20%20A%20%20%20%20%7C%20%20%20%20%20%20%20%20%7C%20%20%20%20%20A%20%20%20%20%20%20%20%7C%0A%7C%20%u518D%u6B21%u6309back%u952E%7C%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%7C%20%20%20%u684C%u9762%20%20%20%20%20%20%7C%0A%0A%23%23%u8BBE%u7F6Eactivity%u542F%u52A8%u7684%u4E24%u79CD%u59FF%u52BF%0A%60%60%60xml%0A%3Cactivity%20android%3Aname%3D%22.MainActivity%22%0A%20%20%20%20%20%20android%3AlaunchMode%3D%22singleTask%22/%3E%0A%60%60%60%0A%0A%60%60%60java%0AIntent%20intent%20%3D%20new%20Intent%28%29%3B%0Aintent.setClass%28this%2CMainActivity.class%29%3B%0Aintent.addFlags%28Intent.FLAG_ACTIVITY_NEW_TASK%29%3B%0AstartActivity%28intent%29%3B%0A%60%60%60%0A%23%23Activity%u7684FLAG%0A%23%23%23%23%23FLAG_ACTIVITY_NEW_TASK%0A%u6808%u5185%u590D%u7528%0A%23%23%23%23%23FLAG_ACTIVITY_SINGLE_TOP%0A%u7B49%u540C%u4E8EsingleTop%u6A21%u5F0F%0A%23%23%23%23%23FLAG_ACTIVITY_CLEAR_TOP%0A%u5177%u6709%u8BE5%u6807%u8BB0%u4F4D%u7684activity%u542F%u52A8%u65F6%u4F1A%u6E05%u7A7A%u4F4D%u4E8E%u8BE5activity%u4E0A%u7684%u6240%u6709%u5B9E%u4F8B%20%u4E0EFLAG_ACTIVITY_NEW_TASK%u5171%u540C%u4F7F%u7528%u65F6%u7B49%u540C%u4E8EsingleTask%0A%23%23%23%23%23FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS%0A%u5177%u6709%u8BE5%u6807%u8BB0%u4F4D%u7684activity%u4E0D%u4F1A%u51FA%u73B0%u5728%u5386%u53F2activity%u5217%u8868%u5F53%u4E2D%0A%0A  </p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[View的基本知识]]></title>
      <url>http://beginlu.me/2016/11/01/View%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="View的基本知识"><a href="#View的基本知识" class="headerlink" title="View的基本知识"></a>View的基本知识</h1><h2 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p>top left 左上角的坐标</p>
<p>bottom right 右下角的坐标</p>
<p>x y 左上角的坐标</p>
<p>translationX translationY 左上角的偏移量</p>
<p>x = left + translationX </p>
<p><strong>这些坐标和偏移量都是相对于父控件的</strong></p>
<h3 id="基础事件"><a href="#基础事件" class="headerlink" title="基础事件"></a>基础事件</h3><p>ACTION_DOWN ACTION_MOVE ACTION_UP…按下 移动 抬起…</p>
<p><strong>TouchSlop</strong></p>
<p>这是系统识别滑动的最小距离…<code>ViewConfiguration(getContext()).getScaledTouchSlop()</code>来获取.可以用来过滤一些 MOVE 事件,用于优化用户体验.</p>
<p><strong>VelocityTracker</strong></p>
<p>这是用于获取用户滑动速度的方法.再<code>OnTouchListener</code>中使用.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">VelocityTracker velocityTracker = VelocityTracker.obtain();</div><div class="line">velocityTracker.addMovement(event);</div><div class="line">velocityTracker.computeCurrentVelocity(<span class="number">1000</span>);<span class="comment">//设置单位时间.这里为1000ms.</span></div><div class="line"><span class="keyword">float</span> xVelocity = velocityTracker.getXVelocity();<span class="comment">//水平方向速度.像素/单位时间.</span></div><div class="line"><span class="keyword">float</span> yVelocity = velocityTracker.getYVelocity();<span class="comment">//竖直方向速度.像素/单位时间.</span></div><div class="line">velocityTracker.clear();</div><div class="line">velocityTracker.recycle();</div></pre></td></tr></table></figure>
<p><strong>GestureDetector</strong></p>
<p>手势检测…</p>
<p>创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GestureDetector mGestureDetector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>, <span class="keyword">new</span> GestureDetector.OnGestureListener() &#123;</div><div class="line">	......</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mGestureDetector.setIsLongpressEnabled(false);</div><div class="line">return mGestureDetector.onTouchEvent(event);</div></pre></td></tr></table></figure>
<p> <img src="屏幕快照 2016-08-14 15.28.36.png" alt="屏幕快照 2016-08-14 15.28.36"> <img src="屏幕快照 2016-08-14 15.28.48.png" alt="屏幕快照 2016-08-14 15.28.48"></p>
<h1 id="View-的滑动"><a href="#View-的滑动" class="headerlink" title="View 的滑动"></a>View 的滑动</h1><h2 id="scrollTo-scrollBy"><a href="#scrollTo-scrollBy" class="headerlink" title="scrollTo/scrollBy"></a>scrollTo/scrollBy</h2><p>这两个方法是用于移动控件的内容的.比如 TextView 中的文字 ListView 里面的列表.scrollTo 是相对于控件左上角进行移动.scrollBy 是相对于内容原本的位置进行移动.<code>v.scrollBy(-10,-10);</code>这是向右移动10像素,向下移动10像素.</p>
<h2 id="使用动画"><a href="#使用动画" class="headerlink" title="使用动画."></a>使用动画.</h2><p>…</p>
<h2 id="改变布局参数"><a href="#改变布局参数" class="headerlink" title="改变布局参数"></a>改变布局参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) v.getLayoutParams();</div><div class="line">layoutParams.height += <span class="number">100</span>;</div><div class="line">layoutParams.width += <span class="number">100</span>;</div><div class="line">v.requestLayout();</div></pre></td></tr></table></figure>
<h2 id="三种方式的比较"><a href="#三种方式的比较" class="headerlink" title="三种方式的比较"></a>三种方式的比较</h2><ul>
<li>scrollTo/scrollBy    实现简单，适合对 View 的内容进行滑动</li>
<li>使用动画：主要用于不涉及交互的比较复杂的动画效果</li>
<li>改变布局参数：主要用于涉及交互的 View.但实现较为复杂.</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单的自定义 View]]></title>
      <url>http://beginlu.me/2016/11/01/%E7%AE%80%E5%8D%95%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%20View/</url>
      <content type="html"><![CDATA[<h1 id="简单的自定义-View"><a href="#简单的自定义-View" class="headerlink" title="简单的自定义 View"></a>简单的自定义 View</h1><h2 id="重写-View-的-onDraw-方法"><a href="#重写-View-的-onDraw-方法" class="headerlink" title="重写 View 的 onDraw 方法"></a>重写 View 的 onDraw 方法</h2><p>可以通过重写 View 的 onDraw 方法在 View 中绘制自己想要的样式</p>
<p>eg：在 View 中绘制一个圆形</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    <span class="keyword">int</span> width = getWidth() - getPaddingLeft() - getPaddingRight();<span class="comment">//获取布局的可绘制的宽度</span></div><div class="line">    <span class="keyword">int</span> height = getHeight() - getPaddingTop() - getPaddingBottom();<span class="comment">//获取布局可绘制的高度</span></div><div class="line">    <span class="keyword">int</span> radius = Math.min(width, height) / <span class="number">2</span>;</div><div class="line">    canvas.drawCircle(getPaddingLeft() + width / <span class="number">2</span>, getPaddingTop() + height / <span class="number">2</span>, radius, mPaint);<span class="comment">//绘制一个圆形.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>在<code>res/values/</code>下新建一个<code>attrs_vier1.xml</code>文件.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"View1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"view1_color"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span><span class="comment">&lt;!--属性名为 view1_color 属性类型为 color--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用自定义属性"><a href="#使用自定义属性" class="headerlink" title="使用自定义属性"></a>使用自定义属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.lu.ipc.view.View1</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/view1"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#111111"</span></div><div class="line">    <span class="attr">app:view1_color</span>=<span class="string">"#a71766"</span> /&gt;</div></pre></td></tr></table></figure>
<h2 id="获取自定义的属性"><a href="#获取自定义的属性" class="headerlink" title="获取自定义的属性"></a>获取自定义的属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View1</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.View1);</div><div class="line">    mColor = a.getColor(R.styleable.View1_view1_color, Color.RED);<span class="comment">//获取自定义属性.</span></div><div class="line">    a.recycle();</div><div class="line">    mPaint.setColor(mColor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 事件分发流]]></title>
      <url>http://beginlu.me/2016/08/21/Android%20%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81/</url>
      <content type="html"><![CDATA[<h1 id="Android-事件分发流"><a href="#Android-事件分发流" class="headerlink" title="Android 事件分发流"></a>Android 事件分发流</h1><p>ACTION_DOWN</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-b9cb65aceea9219b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>ACTION_MOVE ACTION_UP</p>
<p>在哪个View的onTouchEvent 返回true，那么ACTION_MOVE和ACTION_UP的事件从上往下传到这个View后就不再往下传递了，而直接传给自己的onTouchEvent 并结束本次事件传递过程。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/966283-e78685608fced6a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 多进程通信 （IPC）]]></title>
      <url>http://beginlu.me/2016/08/21/Android%20%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%20%EF%BC%88IPC%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="开启多进程"><a href="#开启多进程" class="headerlink" title="开启多进程"></a>开启多进程</h2><p>在四大组件（Activity，Service，Receiver，ContentProvider）中指定 android:process 属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".activity.TwoActivity"</span></div><div class="line">    <span class="attr">android:configChanges</span>=<span class="string">"screenLayout"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":remote"</span> /&gt;</div></pre></td></tr></table></figure>
<p><img src="/content/images/2016/08/-----2016-08-10-10-57-49.png" alt=""></p>
<p>多进程可能造成的问题</p>
<ol>
<li>静态成员和单例模式完全失效（系统为每个进程都创建了一个虚拟机）</li>
<li>线程同步机制完全失效（同上）</li>
<li>SharedPreferences 的可靠性下降（SharedPreferences 不支持两个进程同时进行写操作.否则会造成数据丢失）</li>
<li>Application 会多次创建（同1）</li>
</ol>
<h2 id="多进程间通信的基础"><a href="#多进程间通信的基础" class="headerlink" title="多进程间通信的基础"></a>多进程间通信的基础</h2><h3 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h3><h4 id="Serializable-推荐用于文件存储"><a href="#Serializable-推荐用于文件存储" class="headerlink" title="Serializable(推荐用于文件存储)"></a>Serializable(推荐用于文件存储)</h4><p>需要被序列号的实现 Serializable 接口就可进行序列化和反序列化</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">123321798231L</span>;<span class="comment">//一个任意值.可不不指定.但建议指定.用户校验反序列号的对象是否为该对象</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> userId = <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>序列号与反序列号过程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//序列号过程</span></div><div class="line">ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(getFileStreamPath(<span class="string">"cache.txt"</span>)));</div><div class="line">outputStream.writeObject(userManager);</div><div class="line">outputStream.close();</div><div class="line"></div><div class="line"><span class="comment">//反序列化过程</span></div><div class="line">ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(getFileStreamPath(<span class="string">"cache.txt"</span>)));</div><div class="line">UserManager userManager = (UserManager) objectInputStream.readObject();</div><div class="line">objectInputStream.close();</div></pre></td></tr></table></figure>
<h4 id="Parcelable-推荐用于数据传送"><a href="#Parcelable-推荐用于数据传送" class="headerlink" title="Parcelable(推荐用于数据传送)"></a>Parcelable(推荐用于数据传送)</h4><p>与Serializable类似.同样是使需要被序列号的类实现Parcelable接口.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> userId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userId = userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">User</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        userId = in.readInt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Creator&lt;User&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel parcel, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">//在这里执行序列号过程</span></div><div class="line">        parcel.writeInt(userId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据传送与获取过程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">User userManager = <span class="keyword">new</span> User(<span class="number">3</span>);</div><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ThreeActivity.class);</div><div class="line">intent.putExtra(<span class="string">"user"</span>, userManager);</div><div class="line">startActivity(intent);</div><div class="line"></div><div class="line">User userManager = getIntent().getParcelableExtra(<span class="string">"user"</span>);</div><div class="line">Log.d(<span class="string">"Three"</span>, userManager.userId + <span class="string">""</span>);</div></pre></td></tr></table></figure>
<h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p>Binder 是 Android 中的一种跨进程的通信方式，主要用于 Service，包括AIDL和 Messenger。Messenger 的底层又是由 AIDL 实现.</p>
<h4 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h4><p>首先创建三个文件</p>
<p><strong>Book.java</strong> 简单的实体类.实现了 Parcelable 接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lu.ipc.aidl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Begin on 16/8/10.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> bookId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = bookId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Book</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        bookId = in.readInt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel parcel, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        parcel.writeInt(bookId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Book.aidl</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lu.ipc.aidl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.lu.ipc.aidl.Book;</div><div class="line"></div><div class="line">parcelable Book;</div></pre></td></tr></table></figure>
<p><strong>IBookManager.aidl</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lu.ipc.aidl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.lu.ipc.aidl.Book;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line">            <span class="keyword">double</span> aDouble, String aString);</div><div class="line"></div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个AIDL 文件是用于让系统自动生成 Binder 服务端代码.实现后的代码在./app/build/generated/source/aidl/debug/com/lu/ipc/aidl/目录下.</p>
<p>主要说下生成的类中的 getBookList 和 addBook 两个方法.这两个方法都是在当客户端调用该方法的时候创建一个输入型对象_data 和输出型对象_reply，如果有传入参数则将参数写入到_data 中,接着调用 transact 方法发起 RPC（远程过程调用）请求,这时候当前线程会被挂起.然后服务端的 onTransact 方法会被调用.直到 RPC 过程返回后,当前线程继续执行,并从_reply 中取出返回结果并 return.</p>
<p>附上 Binder 的工作机制图：</p>
<p><img src="/content/images/2016/08/-----2016-08-11-09-32-10.png" alt=""></p>
<h4 id="likeToDeath-和-unlikeToDeath"><a href="#likeToDeath-和-unlikeToDeath" class="headerlink" title="likeToDeath 和 unlikeToDeath"></a>likeToDeath 和 unlikeToDeath</h4><p>这两个是 Binder 中很重要的方法.主要用于服务端和客户端的链接被断开（服务端被杀死）</p>
<p>（没看懂书上说的啥玩意.设置代理.代理触发后回调…大概就这个意思吧…）</p>
<p>设置代理是绑定成功服务后通过<code>binder.linkToDeath(mDeathRecipient,0);</code>实现.</p>
<p>设置代理回调</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> DeathRecipient mDeathRecipient = <span class="keyword">new</span> DeathRecipient() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mBookManager == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        mBookManager.asBinder().unlinkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">        mBookManager = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Android-中的-IPC-方式"><a href="#Android-中的-IPC-方式" class="headerlink" title="Android 中的 IPC 方式"></a>Android 中的 IPC 方式</h2><p>Android 中的 IPC 方式有很多种.可以通过 Intent 中附加 extras 可以通过共享文件.还有 ContentProvider.以及网络通信.</p>
<h3 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h3><p>在 Activity Service Receiver 中都是支持再 Intent 中传递 Bundle 数据的.再 Bundle 中可以附加能够被序列号的对象进行通信</p>
<h3 id="通过文件共享"><a href="#通过文件共享" class="headerlink" title="通过文件共享"></a>通过文件共享</h3><p>没啥说的.读写同一个文件就是了.对象可以通过实现Serializable接口进行序列化</p>
<p>要注意的是不能使用 Sharedpreferences 文件进行共享…因为有缓存…</p>
<h3 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h3><p>本质就是AIDL.是AIDL 一个的一个简单封装.但是 Messenger 只能用来处理消息传送.如果需要调用服务端的方法.Messenger 就无能为力了.这时候就需要使用AIDL 来自己实现跨进程的方法调用.</p>
<p>首先定义 Service</p>
<p><strong>BookService.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//用于接收和处理消息的 Handle</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//当收到消息后</span></div><div class="line">                    Log.d(<span class="string">"BookService"</span>, <span class="string">"msg:"</span> + msg.getData().getString(<span class="string">"msg"</span>));<span class="comment">//获取消息内容并输出 log</span></div><div class="line">                    Messenger client = msg.replyTo;<span class="comment">//获取 reply</span></div><div class="line">                    Message replyMessage = Message.obtain(<span class="keyword">null</span>, <span class="number">1</span>);<span class="comment">//创建返回消息</span></div><div class="line">                    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">                    bundle.putString(<span class="string">"reply"</span>, <span class="string">"world"</span>);<span class="comment">//创建 Bundle 并添加内容</span></div><div class="line">                    replyMessage.setData(bundle);<span class="comment">//为返回消息添加 Bundle 内容</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        client.send(replyMessage);<span class="comment">//发送返回消息</span></div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> BookHandler());<span class="comment">//创建 Messenger</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">//绑定成功后返回Messenger</span></div><div class="line">        <span class="keyword">return</span> mMessenger.getBinder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>MainActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Messenger mGetReplyMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line">    <span class="keyword">private</span> Messenger mMessenger = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">//接收并处理 Service 传来的消息</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    Log.d(<span class="string">"reply"</span>, msg.getData().getString(<span class="string">"reply"</span>));<span class="comment">//获取消息内容并输出 log</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="comment">//绑定成功后的回调</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            mMessenger = <span class="keyword">new</span> Messenger(service);<span class="comment">//获取 Messenger</span></div><div class="line">            Message msg = Message.obtain(<span class="keyword">null</span>, <span class="number">1</span>);<span class="comment">//创建消息</span></div><div class="line">            Bundle data = <span class="keyword">new</span> Bundle();<span class="comment">//创建 Bundle</span></div><div class="line">            data.putString(<span class="string">"msg"</span>, <span class="string">"hello"</span>);<span class="comment">//为 Bundle 添加内容</span></div><div class="line">            msg.setData(data);<span class="comment">//为消息添加 Bundle</span></div><div class="line">            msg.replyTo = mGetReplyMessenger;<span class="comment">//为消息添加reply</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mMessenger.send(msg);<span class="comment">//发送消息到 Service</span></div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookService.class);</div><div class="line">        bindService(intent, mConnection, BIND_AUTO_CREATE);<span class="comment">//绑定消息并设置绑定成功回调</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">08-11 15:28:13.797 28106-28106/com.lu.ipc:remote D/BookService: msg:hello</div><div class="line">08-11 15:28:13.826 27925-27925/com.lu.ipc D/reply: world</div></pre></td></tr></table></figure>
<p>附上 Messenger 通信的工作原理图</p>
<p><img src="/content/images/2016/08/-----2016-08-11-15-42-15.png" alt=""></p>
<h3 id="使用AIDL"><a href="#使用AIDL" class="headerlink" title="使用AIDL"></a>使用AIDL</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>服务端需要创建一个 Service 用来监听客户端的连接请求,然后创建一个AIDL 文件,AIDL 中声明需要暴率给客户端的接口,再 Service 中实现 AIDL 接口</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端成功绑定 Service 后将客户端返回的 Binder 对象转成 AIDL 接口所属的类型即可进行方法的调用.</p>
<h4 id="ADIL-支持的数据类型"><a href="#ADIL-支持的数据类型" class="headerlink" title="ADIL 支持的数据类型"></a>ADIL 支持的数据类型</h4><ul>
<li>基本数据类型 int long char boolean double</li>
<li>String 和 CharSequence</li>
<li>List：只支持 ArrayList 且要求里面的元素为 ADIL 支持的类型</li>
<li>Map：只支持 HashMap 且要求里面的元素为 ADIL 支持的类型</li>
<li>Parcelable：所有实现了该接口的对象</li>
<li>AIDL：所有的 AIDL 接口本身也可以再 AIDL 中使用</li>
</ul>
<blockquote>
<p>注：AIDL 和 Parcelable 必须显示的 import</p>
<p>如果 AIDL 使用了自定义的 Parcelable 对象,必须新建一个同名的 AIDL 文件,然再其中通过 parcelable 声明类型,例如之前提到的 Book.aidl</p>
</blockquote>
<h4 id="AIDL-接口的创建"><a href="#AIDL-接口的创建" class="headerlink" title="AIDL 接口的创建"></a>AIDL 接口的创建</h4><p><strong>Book.aidl</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Book.aidl</span></div><div class="line"><span class="keyword">package</span> com.lu.ipc.aidl;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line">parcelable Book;</div></pre></td></tr></table></figure>
<p><strong>IBookManager.aidl</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IBookManager.aidl</span></div><div class="line"><span class="keyword">package</span> com.lu.ipc.aidl;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> com.lu.ipc.aidl.Book;</div><div class="line"><span class="keyword">import</span> com.lu.ipc.aidl.IOnNewBookArrivedListener;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;<span class="comment">//获取数据</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;<span class="comment">//添加数据</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span></span>;<span class="comment">//添加监听</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span></span>;<span class="comment">//取消监听</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>IOnNewBookArrivedListener.aidl</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IOnNewBookArrivedListener.aidl</span></div><div class="line"><span class="keyword">package</span> com.lu.ipc.aidl;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"><span class="keyword">import</span> com.lu.ipc.aidl.Book;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOnNewBookArrivedListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(in Book newBook)</span></span>;<span class="comment">//回调接口</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面三个文件就稍微解释下.</p>
<p>第一个是实体类的 AIDL 声明.之前说过很多次了…</p>
<p>第二个就理解成是定义可以再客户端调用的服务端中的方法…</p>
<p>第三个是回调接口…就是在客户端中实现该方法.然后注册到服务端中.服务端可以在指定时候调用这个方法.啊…就是 CallBack…我感觉我解释的有问题…可以看下下面的效果…</p>
<p>服务端实现 <strong>BookService.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();<span class="comment">//用户保存Book列表</span></div><div class="line">    <span class="keyword">private</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt; mListenerList = <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();<span class="comment">//用户包括监听列表</span></div><div class="line">    <span class="comment">//实现 AIDL 接口</span></div><div class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line">        <span class="comment">//获取Book的方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">return</span> mBookList;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//添加Book的方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mBookList.add(book);<span class="comment">//添加Book</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = mListenerList.beginBroadcast();<span class="comment">//在需要遍历RemoteCallBackList的时候用户获取 list 长度的方法.</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">                mListenerList.getBroadcastItem(i).onNewBookArrived(book);<span class="comment">//获取到监听后通知客户端.</span></div><div class="line">            &#125;</div><div class="line">            mListenerList.finishBroadcast();<span class="comment">//与beginBroadcast成对使用.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mListenerList.register(listener);<span class="comment">//往监听列表中添加监听</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mListenerList.unregister(listener);<span class="comment">//从监听列表中移除监听</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;<span class="comment">//放回服务器 Binder</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端实现 <strong>ThreeActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> IBookManager bookManager = <span class="keyword">null</span>;<span class="comment">//服务器 binder</span></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;<span class="comment">//启动并绑定服务后被调用</span></div><div class="line">            bookManager = IBookManager.Stub.asInterface(service);<span class="comment">//获取并保存服务器 binder</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bookManager.registerListener(mOnNewBookArrivedListener);<span class="comment">//注册监听.</span></div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//客户端回调.在服务端执行onNewBookArrived 时被调用</span></div><div class="line">    <span class="keyword">private</span> IOnNewBookArrivedListener mOnNewBookArrivedListener = <span class="keyword">new</span> IOnNewBookArrivedListener.Stub() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book newBook)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            Log.d(<span class="string">"TwoActivity"</span>, newBook.bookId + <span class="string">""</span>);<span class="comment">//输出 log</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_two);</div><div class="line"></div><div class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">10</span>));<span class="comment">//点击按钮后往服务器添加一个Book</span></div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(ThreeActivity.<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">        bindService(intent, mConnection, BIND_AUTO_CREATE);<span class="comment">//绑定服务.设置绑定成功后的回调</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行代码后点击按钮就可以看到有输出 log 信息.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">08-12 17:59:42.114 13209-13209/com.lu.ipc:remote D/TwoActivity: 10</div></pre></td></tr></table></figure>
<p><strong>注意：在客户端中调用服务端的方法是在 UI 线程中操作的.如果服务端中执行的是一个耗时操作的话很有可能会产生 ANR（应用程序无响应）所以需要移到非 UI 线程中执行</strong></p>
<p>还有…因为回调方法其实是运行再 Binder 中的.不能直接操作 UI 相关内容.可以通过 Handler切换到 UI 线程中再去操作 UI</p>
<h3 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h3><p>ContentProvider是 Android 中专门用于不同应用间进行数据共享,所以它也非常适合进程间通信.他的底层实现其实也是 Binder.</p>
<p>具体实现方式…</p>
<p>BookProvider.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span></span></div></pre></td></tr></table></figure>
<p>就写这一行…然后实现 ContentProvider 里面的函数</p>
<p>调用方式.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Uri uri = Uri.parse(<span class="string">"content://com.lu.ipc.provider.BookProvider"</span>);</div><div class="line">getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">getContentResolver().delete(uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">getContentResolver().getType(uri);</div></pre></td></tr></table></figure>
<p>当然…这个 Uri 不是乱写的.是再创建 BookProvider.java之后是需要再 AndroidManifest.xml 里面注册的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".provider.BookProvider"</span></div><div class="line">    <span class="attr">android:authorities</span>=<span class="string">"com.lu.ipc.provider.BookProvider"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":remote"</span> /&gt;</div></pre></td></tr></table></figure>
<p>别怪我写的随意…讲道理…我又不喜欢用这个…</p>
<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>我很淡定的跳过了这一部分…下次有空再补上…</p>
<p>##选用合适的 IPC 方式<br><img src="/content/images/2016/08/-----2016-08-13-16-03-34.png" alt=""></p>
<h2 id="Binder连接池"><a href="#Binder连接池" class="headerlink" title="Binder连接池"></a>Binder连接池</h2><p>没太懂书上将的一些东西.只是大概知道一部分.主要是解决 Binder 过多的时候不至于创建一堆 Service 这个问题.每个 Binder 都单独创建一个类.实现AIDL 中的方法.再创建一个 AIDL 中只包含一个<code>IBinder queryBinder(int binderCode);</code>方法.这个方法的实现.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">IBinder binder = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">switch</span> (binderCode) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        binder = <span class="keyword">new</span> SecurityCenterImpl();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        binder = <span class="keyword">new</span> ComputeImpl();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> binder;</div></pre></td></tr></table></figure>
<p>关于这个 AIDL 的调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">IBinder securityBinder = mBinderPool.queryBinder(<span class="number">1</span>);</div><div class="line">mSecurityCenter = SecurityCenterImpl.asInterface(securityBinder);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    String hello = mSecurityCenter.decrypt(<span class="string">"hello"</span>);</div><div class="line">    Log.d(<span class="string">"Four"</span>, hello);</div><div class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以就是创建了一个 Service 用了分发对于 Binder 的调用.或者可以说是创建了一个 Service 用于查询 Binder.</p>
<blockquote>
<p>本文内容主要来源于《Android开发艺术探索》.</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android动态加载]]></title>
      <url>http://beginlu.me/2016/08/04/Android%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>最近因为接口问题搞得有点头大.感觉每次因为接口变动而更新 APP 是会被用户骂死的.所以想起了 JAVA 的反射机制.也就来了一波动态加载.</p>
<p>百度百科解释的 JAVA 反射</p>
<blockquote>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>
</blockquote>
<p>然后是动态加载</p>
<blockquote>
<p>在程序运行的时候，加载一些程序自身原本不存在的可执行文件并运行这些文件里的代码逻辑。</p>
</blockquote>
<p>这两者之间的关系就是使用反射机制达到动态加载的效果.很简单的.</p>
<p>因为我这里要处理的问题有两个.一个是接口地址的变动.一个是接口返回数据格式的变动.</p>
<p>第一个问题很好解决.服务器上保存一个文本文档.内容包含接口地址的变量名和值.本地检查文本文档的版本号.发现有更新就下载文本文档.这个我也就不多讲.主要是在更新接口文件后加载这个文件.查看文件内容.更具内容来修改接口地址的值.也就是需要通过反射机制来修改 JAVA 文件了.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"/data/data/com.mcdull.cert/files/url"</span>);<span class="comment">//加载文件</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">    String s = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">while</span> ((s = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">        String name = s;<span class="comment">//读取文件内容</span></div><div class="line">        String url = bufferedReader.readLine();<span class="comment">//读取文件内容</span></div><div class="line">        Class aClass = Class.forName(<span class="string">"com.mcdull.cert.utils.InternetUtil"</span>);<span class="comment">//反射获取包含接口地址信息的JAVA 文件</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Field field = aClass.getField(name);<span class="comment">//获取变量</span></div><div class="line">            field.set(aClass, url);<span class="comment">//为变量赋值</span></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个就是具体的实现代码.有一个地方要注意的就是再获取变量这个地方.编译器不会提示错误或者异常.是因为外部抛了一个更大的异常.但是这里不一定包含name 这个名字的变量.所以需要自己手抛一个异常进行处理…</p>
<p>这个还是比较简单的反射.只是读取文件和设置变量.接下来是需要通过反射来实现动态加载json解析的函数.</p>
<p>本来想讲下错误案例的…想想还是先讲下正确的做法.有空再在最后补充下有可能出现的错误…</p>
<p>因为我这里讲的是 Android 动态加载.所以就打开你的 Android 工程吧.在你的项目那右键–&gt;new–&gt;Module–&gt;Android Library 然后输入一些信息就会自动创建完成了.<br>创建好之后应该是这样的.<br><img src="/content/images/2016/08/-----2016-08-04-20-41-24.png" alt=""><br>然后先不管他.先在你自己的工程中创建一个abstract<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.mcdull.cert.json;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Begin on 16/8/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsJsonUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;List&lt;String&gt;&gt; scoreParseJson(String s);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbsJsonUtil <span class="title">getJsonUtil</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(<span class="string">"/data/data/com.mcdull.cert/files/json.jar"</span>, context.getDir(<span class="string">"dex"</span>, Context.MODE_PRIVATE).getAbsolutePath(), <span class="keyword">null</span>, context.getClassLoader());</div><div class="line">        Class&lt;?&gt; myClass1 = dexClassLoader.loadClass(<span class="string">"com.lu.json.JsonUtil"</span>);<span class="comment">//通过反射加载 JsonUtil</span></div><div class="line">        <span class="keyword">return</span> (AbsJsonUtil) myClass1.newInstance();<span class="comment">//获取到实现后的 AbsJsonUtil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个代码中主要是包含解析 json 的接口.也就是动态加载的内容中所需要实现的接口.和一个动态加载函数.我主要讲一下动态加载函数.</p>
<p>这里是使用的 DexClassLoader 和 JAVA 中使用的 UrlClassLoader 不一样.原因我就不讲了.主要是 Android 和 JAVA 的运行机制不一样.这里 DexClassLoader 的四个参数分别是自己生成的 jar 包的路径，临时 dex 存放路径，所需要加载的本地 dex 路径和加载器.</p>
<p>然后把它复制一份到刚刚创建的 Module 中的 java 文件夹下.注意包结构要和 Android 项目中的一致.然后再创建一个不同包结构的 JsonUtil 类继承 AbsJsonUtil注意是不同包结构.相同肯定会出问题.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lu.json;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mcdull.cert.json.AbsJsonUtil;</div><div class="line"><span class="keyword">import</span> org.json.JSONArray;</div><div class="line"><span class="keyword">import</span> org.json.JSONException;</div><div class="line"><span class="keyword">import</span> org.json.JSONObject;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Begin on 16/8/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtil</span> <span class="keyword">extends</span> <span class="title">AbsJsonUtil</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; scoreParseJson(String s) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            JSONObject jsonObject = <span class="keyword">new</span> JSONObject(s);</div><div class="line">            JSONArray data = jsonObject.getJSONArray(<span class="string">"data"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length(); i++) &#123;</div><div class="line">                JSONObject object = (JSONObject) data.get(i);</div><div class="line">                List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">                list.add(object.getString(<span class="string">"course"</span>));</div><div class="line">                list.add(object.getString(<span class="string">"score"</span>));</div><div class="line">                list.add(object.getString(<span class="string">"credit"</span>));</div><div class="line">                lists.add(list);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个代码没什么看的.就是实现 json 解析.</p>
<p>然后就是在需要调用的地方使用如下代码进行调用就行了.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lists =AbsJsonUtil.getJsonUtil(<span class="keyword">this</span>).scoreParseJson(scoreJson);</div></pre></td></tr></table></figure></p>
<p>看上去好像没什么问题.但是还有一个步骤.很重要的步骤.那就是生成 jar 包.没生成 jar 包去给应用进行更新.哪来的动态加载…</p>
<p>现在需要打开Module中的build.gradle来修改修改.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"23.0.2"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion <span class="number">16</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.1.1'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//dependsOn 可根据实际需要增加或更改</span></div><div class="line"><span class="keyword">task</span> buildJar(dependsOn: [<span class="string">'compileReleaseJavaWithJavac'</span>], type: Jar) &#123;</div><div class="line">    appendix = <span class="string">"demo"</span></div><div class="line">    baseName = <span class="string">"androidJar"</span></div><div class="line">    version = <span class="string">"1.0.0"</span></div><div class="line">    classifier = <span class="string">"release"</span></div><div class="line">    <span class="comment">//后缀名</span></div><div class="line">    extension = <span class="string">"jar"</span></div><div class="line">    <span class="comment">//最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]</span></div><div class="line">    archiveName = <span class="string">"json.jar"</span></div><div class="line">    <span class="comment">//需打包的资源所在的路径集</span></div><div class="line">    <span class="keyword">def</span> srcClassDir = [<span class="keyword">project</span>.buildDir.absolutePath + <span class="string">"/intermediates/classes/release"</span>];</div><div class="line">    <span class="comment">//初始化资源路径集</span></div><div class="line">    <span class="keyword">from</span> srcClassDir</div><div class="line">    <span class="comment">//去除路径集下部分的资源</span></div><div class="line"><span class="comment">//    exclude "**/R.class"</span></div><div class="line"><span class="comment">//    exclude "**/R\$*.class"</span></div><div class="line">    <span class="comment">//只导入资源路径集下的部分资源</span></div><div class="line">    <span class="keyword">include</span> <span class="string">"com/lu/json/*.class"</span></div><div class="line">    <span class="comment">//注: exclude include 支持可变长参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后运行<code>./gradlew buildJar</code>就生成了 jar 包.但是这并没有什么用处.你使用这个 jar 包进行反射的时候会提示<code>doesn&#39;t contain classes.dex</code>所以还需要由sdk 自带的 dx 工具对 jar 进行再一次打包 <code>./dx --dex --output=打包后文件 被打包文件</code>这样就可以进行反射了…（dx工具在 build-tools 里面）</p>
<p>再贴一下我 copy 的gradle 代码<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.android.build.gradle.AppPlugin</div><div class="line"><span class="keyword">import</span> com.android.build.gradle.LibraryPlugin</div><div class="line"><span class="keyword">import</span> proguard.gradle.ProGuardTask</div><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">23</span></div><div class="line">    buildToolsVersion <span class="string">"23.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"org.chaos.demo.jar"</span></div><div class="line">        minSdkVersion <span class="number">19</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">true</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">&#125;</div><div class="line"><span class="comment">//dependsOn 可根据实际需要增加或更改</span></div><div class="line"><span class="keyword">task</span> buildJar(dependsOn: [<span class="string">'compileReleaseJavaWithJavac'</span>], type: Jar) &#123;</div><div class="line">    appendix = <span class="string">"demo"</span></div><div class="line">    baseName = <span class="string">"androidJar"</span></div><div class="line">    version = <span class="string">"1.0.0"</span></div><div class="line">    classifier = <span class="string">"release"</span></div><div class="line">    <span class="comment">//后缀名</span></div><div class="line">    extension = <span class="string">"jar"</span></div><div class="line">    <span class="comment">//最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]</span></div><div class="line">    archiveName = <span class="string">"AndroidJarDemo.jar"</span></div><div class="line">    <span class="comment">//需打包的资源所在的路径集</span></div><div class="line">    <span class="keyword">def</span> srcClassDir = [<span class="keyword">project</span>.buildDir.absolutePath + <span class="string">"/intermediates/classes/release"</span>];</div><div class="line">    <span class="comment">//初始化资源路径集</span></div><div class="line">    <span class="keyword">from</span> srcClassDir</div><div class="line">    <span class="comment">//去除路径集下部分的资源</span></div><div class="line"><span class="comment">//    exclude "org/chaos/demo/jar/MainActivity.class"</span></div><div class="line"><span class="comment">//    exclude "org/chaos/demo/jar/MainActivity\$*.class"</span></div><div class="line"><span class="comment">//    exclude "org/chaos/demo/jar/BuildConfig.class"</span></div><div class="line"><span class="comment">//    exclude "org/chaos/demo/jar/BuildConfig\$*.class"</span></div><div class="line"><span class="comment">//    exclude "**/R.class"</span></div><div class="line"><span class="comment">//    exclude "**/R\$*.class"</span></div><div class="line">    <span class="comment">//只导入资源路径集下的部分资源</span></div><div class="line">    <span class="keyword">include</span> <span class="string">"org/chaos/demo/jar/**/*.class"</span></div><div class="line">    <span class="comment">//注: exclude include 支持可变长参数</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">task</span> proguardJar(dependsOn: [<span class="string">'buildJar'</span>], type: ProGuardTask) &#123;</div><div class="line">    <span class="comment">//Android 默认的 proguard 文件</span></div><div class="line">    configuration android.getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>)</div><div class="line">    <span class="comment">//manifest 注册的组件对应的 proguard 文件</span></div><div class="line">    configuration <span class="keyword">project</span>.buildDir.absolutePath + <span class="string">"/intermediates/proguard-rules/release/aapt_rules.txt"</span></div><div class="line">    configuration <span class="string">'proguard-rules.pro'</span></div><div class="line">    String inJar = buildJar.archivePath.getAbsolutePath()</div><div class="line">    <span class="comment">//输入 jar</span></div><div class="line">    injars inJar</div><div class="line">    <span class="comment">//输出 jar</span></div><div class="line">    outjars inJar.substring(<span class="number">0</span>, inJar.lastIndexOf(<span class="string">'/'</span>)) + <span class="string">"/proguard-$&#123;buildJar.archiveName&#125;"</span></div><div class="line">    <span class="comment">//设置不删除未引用的资源(类，方法等)</span></div><div class="line">    dontshrink</div><div class="line">    Plugin plugin = getPlugins().hasPlugin(AppPlugin) ?</div><div class="line">            getPlugins().findPlugin(AppPlugin) :</div><div class="line">            getPlugins().findPlugin(LibraryPlugin)</div><div class="line">    <span class="keyword">if</span> (plugin != <span class="keyword">null</span>) &#123;</div><div class="line">        List&lt;String&gt; runtimeJarList</div><div class="line">        <span class="keyword">if</span> (plugin.getMetaClass().getMetaMethod(<span class="string">"getRuntimeJarList"</span>)) &#123;</div><div class="line">            runtimeJarList = plugin.getRuntimeJarList()</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (android.getMetaClass().getMetaMethod(<span class="string">"getBootClasspath"</span>)) &#123;</div><div class="line">            runtimeJarList = android.getBootClasspath()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            runtimeJarList = plugin.getBootClasspath()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (String runtimeJar : runtimeJarList) &#123;</div><div class="line">            <span class="comment">//给 proguard 添加 runtime</span></div><div class="line">            libraryjars(runtimeJar)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>需要代码混淆使用<code>./gradlew proguardJar</code></p>
</blockquote>
<p>讲的有点乱…</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用树莓派制作一个实时监控的遥控小车]]></title>
      <url>http://beginlu.me/2016/07/30/%E5%88%A9%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E7%9A%84%E9%81%A5%E6%8E%A7%E5%B0%8F%E8%BD%A6/</url>
      <content type="html"><![CDATA[<p><img src="/content/images/2016/07/Screenshot_2016-07-22-19-16-26-543_com-lu-che.jpg" style="float:left" width="30%"><img src="/content/images/2016/07/6AC706DD27F6C6B063DF0D6EBE5D5FC3.jpg" width="30%/"></p>
<p>先上一波成果图</p>
<p>然后就是所需要的物品</p>
<p><img width="60%" src="/content/images/2016/07/IMG_20160729_212509.jpg"></p>
<p>包括树莓派（我这里是2代B+版）<br><br>L298N电机驱动板<br>小车底座轮胎电机等…<br><br>树莓派摄像头<br><br>USB 无线网卡<br><br>一把杜邦线（公对公 公对母 母对母）<br></p>
<p>因为我这里用的是移动电源为L298N供电.所以我还准备了一跟USB线。</p>
<p>然后是组装小车.底座方面没什么好说的.注意的是电机用公对公的杜邦线连.</p>
<p>连好后是这样的…</p>
<p><img width="60%" src="/content/images/2016/07/IMG_20160729_215024.jpg"><br>然后是接线<br><br>电机上接出来的八根线将左边两个电机的接到OUT1和OUT2上.右边两个电机的接 OUT3和OUT4注意 OUT1和OUT2是电流的正负.注意别把一个电机的两根线都接到同一个OUT口了.<br></p>
<p>再取两根公对公的线接12V和GND用于电机供电在取两根公对母线接5V和GND 口用于逻辑芯片供电.</p>
<p>接好后如图</p>
<p><img width="60%" src="/content/images/2016/07/IMG_20160729_215306.jpg"></p>
<p>将接12V和GND的线与USB线连接.</p>
<p>像这样.用于连接移动电源供电</p>
<p><img width="60%" src="/content/images/2016/07/IMG_20160729_220621.jpg"></p>
<p>然后再取八根母对母的线连接ENA、ENB和IN1-4<br><img width="60%" src="/content/images/2016/07/IMG_20160729_220358.jpg"></p>
<p>再将另一头接到树莓派上.注意树莓派的40个针脚对应的功能不是完全一样的.上一张B+版的图.</p>
<p><img width="60%" src="/content/images/2016/07/7d68bca4165c73a0.jpg"></p>
<p>我这里将IN1-4接到GPIO.22-25上 ENA和ENB接到GPIO26-29上<br><br>还有之前的5V和GND两根线接到5V和0V两个口上</p>
<p><img width="60%" src="/content/images/2016/07/IMG_20160729_220438.jpg"><br><img width="60%" src="/content/images/2016/07/IMG_20160729_220423.jpg"><br>再将摄像头插上后就算完全接好了.</p>
<p>接下来你需要给你的树莓派装上个系统.我这里装的是NOOBS.<a href="https://www.raspberrypi.org/downloads/noobs/" target="_blank" rel="external">下载链接</a>.建议下离线版…下载完后解压到内存卡里插进树莓派然后通电…接下来就是傻瓜式操作了.</p>
<p>====================================</p>
<p>进入桌面之后呢…先用你的无线网卡连上WIFI.然后打开命令行…我不喜欢在 Linux里面用图形界面…感觉怪怪的…<br><br>1.更新软件源<br>2.下载控制GPIO的python库<br>3.安装GPIO库<br>4.安装flask库<br>5…….</p>
<p>以上几步待我想起些什么的时候再补充.因为我系统里已经完成以上步骤了…</p>
<p>然后我说明一下如何通过 python 先让小车动起来…<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</div><div class="line">GPIO.setmode(GPIO.BOARD)</div><div class="line">GPIO.setup(<span class="number">32</span>, GPIO.OUT)</div><div class="line">GPIO.setup(<span class="number">36</span>, GPIO.OUT)</div><div class="line">GPIO.setup(<span class="number">38</span>, GPIO.OUT)</div><div class="line">GPIO.setup(<span class="number">40</span>, GPIO.OUT)</div><div class="line">GPIO.output(<span class="number">32</span>, GPIO.HIGH)</div><div class="line">GPIO.output(<span class="number">36</span>, GPIO.HIGH)</div><div class="line">GPIO.output(<span class="number">38</span>, GPIO.HIGH)</div><div class="line">GPIO.output(<span class="number">40</span>, GPIO.HIGH)</div></pre></td></tr></table></figure></p>
<p>这些代码的意思很简单.就是将32 36 38 40这四个针脚变为输出的高电位.要注意的是.这里的编号是使用树莓派上1-40这样的编号.也就是32对应的是 GPIO.29。注意参考上面那张树莓派针脚图.</p>
<p>这样做的目的很简单.就是通过将ENA和ENB设置为高电位后使电机工作.这时候有可能有电机已经开始转起来了.<br><br>但不要着急.还需要改变33 35 37 39这四个针脚的高低电位来使电机按自己的意愿工作起来.这里33 35 37 39就是通过控制IN1-4来调整OUT1-4的电流的.</p>
<p><img width="60%" src="/content/images/2016/07/8B1B5E54-475E-406E-BE00-45BFC6D5C8EA.png"></p>
<p>这里你就可以愉快的控制电机了…接下来是是摄像头和 APP 控制.这里我就不讲解了.直接在最后会上github 地址.</p>
<p>====================================</p>
<p>我们现在补充一些PWM调速的姿势.<br><br>现在小车是能按着我们我要求前进后退旋转了.可是他不能变速.所以ENA和ENB的用处就体现出来了.</p>
<p>这里我就只简单的举一个例子.大家举一反三…ENA和ENB在都是高电位的时候是小车工作.那么如果ENA和ENB每1毫秒变换一次电位.就能达到半速的效果…具体实现就是通过一个死循环.将32 36 38 40设为高电位后休眠1毫秒后设为低电位.在休眠1毫秒.如此循环…</p>
<p>=====================================</p>
<p>啊.就说这么多.上 <a href="https://github.com/BeginLjm/Raspberry-PI-telecar" target="_blank" rel="external">github地址</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Idea 通过 Maven 配置 Spring MVC+Hibernate]]></title>
      <url>http://beginlu.me/2016/05/01/idea%E9%85%8D%E7%BD%AEspring%20mvc/</url>
      <content type="html"><![CDATA[<p>#####1.新建项目<br>选择 Maven<br>勾选上 Create from archetype<br>选择 org.apache.maven.archetypes:maven-archetype-webapp</p>
<p><img src="/content/images/2016/04/-----2016-04-24-15-49-09.png" alt=""></p>
<p>next</p>
<p>填写 GroupId 和 ArifactId<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GroupID是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构。</div><div class="line">ArtifactID就是项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。</div><div class="line">一般GroupID就是填com.leafive.test这样子</div></pre></td></tr></table></figure></p>
<p><img src="/content/images/2016/04/-----2016-04-24-16-00-31.png" alt=""></p>
<p>接下来就是傻瓜式的下一步.<br>进入编辑器后等待编辑器自动构建完成项目后打开==pom.xml==文件.将其修改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">spring-data.version</span>&gt;</span>1.10.1.RELEASE<span class="tag">&lt;/<span class="name">spring-data.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-data.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-jpa-2.0-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.10.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>20080701<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.28.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>等待编译器自动完成下载和导入后修改 ==web.xml== 文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></div><div class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>完成后进入项目设计菜单新建一个文件夹<br><img src="/content/images/2016/05/-----2016-05-01-13-00-56.png" alt=""><br>之后再将其设置为 Sources 文件夹<br><img src="/content/images/2016/05/-----2016-05-01-13-02-11.png" alt=""><br>在 java 文件夹中下创建如下四个包<br><img src="/content/images/2016/05/-----2016-05-01-15-54-17.png" alt=""><br>然后在 WEB-INF 目录下创建 mvc-dispatcher-servlet.xml 文件<br>内容如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--指明 controller 所在包，并扫描其中的注解--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.controller"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 静态资源(js、image等)的访问 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 开启注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--ViewResolver 视图解析器--&gt;</span></div><div class="line">    <span class="comment">&lt;!--用于支持Servlet、JSP视图解析--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 Controller 包中创建 MainController.java 文件<br>内容如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在 WEB-INF 目录下创建 pages 目录.在该目录中创建 index.jsp 文件<br>内容如下<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="zh-CN"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset="utf-8"&gt;</div><div class="line">    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;</div><div class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</div><div class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</div><div class="line">    &lt;title&gt;SpringMVC Demo 首页&lt;/title&gt;</div><div class="line"></div><div class="line">    &lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</div><div class="line">    &lt;link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"&gt;</div><div class="line"></div><div class="line">    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</div><div class="line">    &lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</div><div class="line">    &lt;!--[if lt IE 9]&gt;</div><div class="line">    &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;![endif]--&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;这里是SpringMVC Demo首页&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;h3&gt;出现此页面，说明配置成功。&lt;/h3&gt;</div><div class="line"></div><div class="line">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</div><div class="line">&lt;script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</div><div class="line">&lt;script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这时候 SpringMVC 的配置已经基本完成了.直接运行项目就可以看到<br><img src="/content/images/2016/05/-----2016-05-01-21-59-02-1.png" alt=""><br>然后先把 Spring 放一边.来配置一下Hibernate.<br>首先右键项目选择 Add Framework Support<br><img src="/content/images/2016/05/-----2016-05-01-22-00-57.png" alt=""><br>然后勾选上 JavaEE Persistence 后选择 Hibernate 点击 OK<br><img src="/content/images/2016/05/-----2016-05-01-22-15-36.png" alt=""><br>这时候已经导入了 Hibernate 的 jar 包.然后点击编辑器的左下角的 Persistence在 SpringMVC 上右键.选择By DataBase Schema<br><img src="/content/images/2016/05/-----2016-05-01-15-59-21.png" alt=""><br>点击 Choose Data Source 旁的… 之后点击+号选择 MySql<br><img src="/content/images/2016/05/-----2016-05-01-16-00-34.png" alt=""><br>填写完成后点击 OK<br><img src="/content/images/2016/05/-----2016-05-01-16-01-25.png" alt=""><br>PS:数据库的创建我不介绍.直接上数据库的结构图.<br>user 表<br><img src="/content/images/2016/05/-----2016-05-01-16-03-03.png" alt=""><br>blog 表<br><img src="/content/images/2016/05/-----2016-05-01-16-02-53.png" alt=""><br>之后返回到上一级页面.然后选择包.点击刷新.选上表及内容后点击 OK<br><img src="/content/images/2016/05/-----2016-05-01-22-18-11.png" alt=""><br>修改一下 persistence.xml 文件<br>如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span> <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"defaultPersistenceUnit"</span>  <span class="attr">transaction-type</span>=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 使用MySQL方言 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.dialect.MySQL5Dialect"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 数据库连接的URL地址 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span></span></div><div class="line">                      <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/springdemo"</span>/&gt;</div><div class="line">            <span class="comment">&lt;!-- 数据库连接的驱动 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 数据库连接的用户名 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 数据库连接的密码 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span> <span class="attr">value</span>=<span class="string">"Lu935226769"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 显示SQL语句 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.useUnicode"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 在显示SQL语句时格式化语句 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.use_sql_comments"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 自动输出schema创建DDL语句 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span>/&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 数据库连接超时后自动重连 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autoReconnect"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.autoReconnectForPools"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.is-connection-validation-required"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这时候就已经完成了通过 Hibernate 导入数据库的操作<br>但需要为 model 创建 repository<br>内容如下<br><img src="/content/images/2016/05/-----2016-05-01-16-12-20.png" alt=""><br>然后需要修改 mvc-dispatcher-servlet.xml 文件.加入以下内容…</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 表示JPA Repository所在的包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.springmvc.repository"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 链接到persistence.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalEntityManagerFactoryBean"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"persistenceUnitName"</span> <span class="attr">value</span>=<span class="string">"defaultPersistenceUnit"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 事务管理 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"annotatedClasses"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.springmvc.model.Blog<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.springmvc.model.User<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/SpringDemo<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 开启事务管理注解 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>再在 MainController 文件中加入以下内容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">UserRepository userRepository;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/admin/users"</span>, method = RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsers</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</div><div class="line">    List&lt;User&gt; list = userRepository.findAll();</div><div class="line">    modelMap.addAttribute(<span class="string">"userList"</span>, list);</div><div class="line">    <span class="keyword">return</span> <span class="string">"admin/users"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 pages 下创建目录 admin 中创建 users.jsp 文件<br>内容如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</div><div class="line">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="zh-CN"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset="utf-8"&gt;</div><div class="line">  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;</div><div class="line">  &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</div><div class="line">  &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</div><div class="line">  &lt;title&gt;SpringMVC 用户管理&lt;/title&gt;</div><div class="line"></div><div class="line">  &lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</div><div class="line">  &lt;link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"&gt;</div><div class="line"></div><div class="line">  &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</div><div class="line">  &lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</div><div class="line">  &lt;!--[if lt IE 9]&gt;</div><div class="line">  &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</div><div class="line">  &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">  &lt;![endif]--&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class="container"&gt;</div><div class="line">  &lt;h1&gt;SpringMVC 博客系统-用户管理&lt;/h1&gt;</div><div class="line">  &lt;hr/&gt;</div><div class="line"></div><div class="line">  &lt;h3&gt;所有用户 &lt;a href="/admin/users/add" type="button" class="btn btn-primary btn-sm"&gt;添加&lt;/a&gt;&lt;/h3&gt;</div><div class="line"></div><div class="line">  &lt;!-- 如果用户列表为空 --&gt;</div><div class="line">  &lt;c:if test="$&#123;empty userList&#125;"&gt;</div><div class="line">    &lt;div class="alert alert-warning" role="alert"&gt;</div><div class="line">      &lt;span class="glyphicon glyphicon-info-sign" aria-hidden="true"&gt;&lt;/span&gt;User表为空，请&lt;a href="/admin/users/add" type="button" class="btn btn-primary btn-sm"&gt;添加&lt;/a&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/c:if&gt;</div><div class="line"></div><div class="line">  &lt;!-- 如果用户列表非空 --&gt;</div><div class="line">  &lt;c:if test="$&#123;!empty userList&#125;"&gt;</div><div class="line">    &lt;table class="table table-bordered table-striped"&gt;</div><div class="line">      &lt;tr&gt;</div><div class="line">        &lt;th&gt;ID&lt;/th&gt;</div><div class="line">        &lt;th&gt;昵称&lt;/th&gt;</div><div class="line">        &lt;th&gt;姓名&lt;/th&gt;</div><div class="line">        &lt;th&gt;密码&lt;/th&gt;</div><div class="line">        &lt;th&gt;操作&lt;/th&gt;</div><div class="line">      &lt;/tr&gt;</div><div class="line"></div><div class="line">      &lt;c:forEach items="$&#123;userList&#125;" var="user"&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">          &lt;td&gt;$&#123;user.id&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;$&#123;user.nickname&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;$&#123;user.firstName&#125; $&#123;user.lastName&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;$&#123;user.password&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;</div><div class="line">            &lt;a href="/admin/users/show/$&#123;user.id&#125;" type="button" class="btn btn-sm btn-success"&gt;详情&lt;/a&gt;</div><div class="line">            &lt;a href="/admin/users/update/$&#123;user.id&#125;" type="button" class="btn btn-sm btn-warning"&gt;修改&lt;/a&gt;</div><div class="line">            &lt;a href="/admin/users/delete/$&#123;user.id&#125;" type="button" class="btn btn-sm btn-danger"&gt;删除&lt;/a&gt;</div><div class="line">          &lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">      &lt;/c:forEach&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">  &lt;/c:if&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</div><div class="line">&lt;script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</div><div class="line">&lt;script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>这时候运行项目访问<a href="http://localhost:8080/admin/users" target="_blank" rel="external">http://localhost:8080/admin/users</a> 就可以看到<br><img src="/content/images/2016/05/-----2016-05-01-23-42-09.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Spring Mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DrawerLayout（侧滑菜单）]]></title>
      <url>http://beginlu.me/2016/04/27/DrawerLayout%EF%BC%88%E4%BE%A7%E6%BB%91%E8%8F%9C%E5%8D%95%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>首先在 AS 中引入Material Design Support 包</p>
<en-media hash="5b4abc55aa98461b6500d504b04c8f3e" type="image/png" style="width: 347px; height: auto;">

<p>在布局文件中使用 DrawerLayout</p>
<en-media hash="c26ab82fe54b82c532faccd936ed1572" type="image/png" style="width: 453px; height: auto;">

<p>其中 FrameLayout 是界面视图 RelativeLayout 是侧滑视图 其中的 include 是侧滑菜单布局</p>
<p>在 JAVA 文件中获取侧滑菜单控件及布局</p>
<en-media hash="4e28076451e55480ac1b2f5ae7cace92" type="image/png" style="width: 467px; height: auto;">

<p>关闭侧滑菜单</p>
<en-media hash="8d95e9d3c575fa0a1e27fbc2fd34c008" type="image/png" style="width: 214px; height: auto;">

<p>打开侧滑菜单</p>
<en-media hash="cfcbdb04ad564bb350c9d3778e271f3d" type="image/png" style="width: 272px; height: auto;">
</en-media></en-media></en-media></en-media></en-media>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ListView ScrollView 不得不说的一些事]]></title>
      <url>http://beginlu.me/2016/01/23/ListView%20ScrollView%20%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>因为其实也不是第一次遇到这样的问题了.即便是第二次遇到这个问题.依然是让我头疼不已.<br>很多时候会遇到一些需求是需要在 ScrollView 中嵌套 ListView 的.对于这种情况我熟悉的有两种解决方案</p>
<h1 id="ScrollView-中嵌套-ListView"><a href="#ScrollView-中嵌套-ListView" class="headerlink" title="ScrollView 中嵌套 ListView"></a>ScrollView 中嵌套 ListView</h1><h2 id="1-将-ListView-之外的部分作为-ListView-中的一部分"><a href="#1-将-ListView-之外的部分作为-ListView-中的一部分" class="headerlink" title="1.将 ListView 之外的部分作为 ListView 中的一部分."></a>1.将 ListView 之外的部分作为 ListView 中的一部分.</h2><p>这个方法是在getView中对 position 进行判断并处理。<br>这个方法能满足几乎所有的情况，但是这样的话在 Adapter 中 getView 方法里的代码就过于复杂了。</p>
<h2 id="2-重写-ListView"><a href="#2-重写-ListView" class="headerlink" title="2.重写 ListView"></a>2.重写 ListView</h2><p>自定义 View 继承 ListView<br>重写onMeasure方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 重写该方法，达到使ListView适应ScrollView的效果</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>, MeasureSpec.AT_MOST);</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, expandSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法我暂时发现了一个问题，就是在初次加载的时候会加载一次 ListView 中所有的 View，虽然通过在 Adapter 中使用 convertView 可以避免内存溢出,但是在 Count 数量很大的情况下会消耗较长时间。</p>
<p>更多方法可以<a href="http://bbs.anzhuo.cn/thread-982250-1-1.html" target="_blank" rel="external">点击这里</a>查看</p>
<h1 id="ScrollView-中嵌套-ViewPage"><a href="#ScrollView-中嵌套-ViewPage" class="headerlink" title="ScrollView 中嵌套 ViewPage"></a>ScrollView 中嵌套 ViewPage</h1><p>在 ScrollView 中嵌套 ViewPage 会出现点击事件无响应且无法滑动的情况。<br>这时候可以重写 ScrollView<br>自定义一个 View 继承ScrollView<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> canScroll;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> GestureDetector mGestureDetector;</div><div class="line">    View.OnTouchListener mGestureListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        mGestureDetector = <span class="keyword">new</span> GestureDetector(<span class="keyword">new</span> YScrollDetector());</div><div class="line">        canScroll = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(ev.getAction() == MotionEvent.ACTION_UP)</div><div class="line">            canScroll = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev) &amp;&amp; mGestureDetector.onTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">YScrollDetector</span> <span class="keyword">extends</span> <span class="title">SimpleOnGestureListener</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScroll</span><span class="params">(MotionEvent e1, MotionEvent e2, <span class="keyword">float</span> distanceX, <span class="keyword">float</span> distanceY)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(canScroll)</div><div class="line">                <span class="keyword">if</span> (Math.abs(distanceY) &gt;= Math.abs(distanceX))</div><div class="line">                    canScroll = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    canScroll = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span> canScroll;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2015年总结]]></title>
      <url>http://beginlu.me/2015/12/31/2015%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>首先，仔细回想了一下这一年，用一个词来形容的话就是荒废。<br>这一年，我开发了第一款属于自己独立开发的 APP，第一次对某公司现有 APP 进行了短期的更新与维护，第一次去学习 Android 开发以外其它的开发技术……<br>虽然这一年我有很多的第一次，但是真在的感觉到了自己的荒废。没有了最初学习的那种努力，开始无意义无目的的学习。没有了以前熬夜编码的精力，开始纠结自己的身体状况。<br>这一年做了很多，但是远没有我想像中收获的那么多，很多时候看到某某公司招聘要求是3年以上开发经验，但是我这一年下来并没有感觉我的提升有我想象中那么大。我不知道用这样的进度，两年后我的 Android 技能树能点到多少，因为我知道，越到后面，提升越难。<br>这一年，我仅仅只是在去年的基础上学会了 Android 中在我看来极小部分的知识<br>这一年，我仅仅是了解了 javaweb 开发的一些基本知识<br>这一年，我仅仅是学了很多 但会的不多<br>作为程序员，我这一年只做了这些。<br>作为一个学生，我只能说我的大学生活过去一半了，英语也还一直是挂，时间也越来越不够用了。<br>希望我明年能在 Android 开发方面再有突破，对 Linux 和 C 语言进行更系统的学习，开始涉及 Android 底层方面的开发，在 Android开发这条路上能越走越远。<br>希望我明年也能对自己好好的，少熬夜，少熬夜，少熬夜！</p>
]]></content>
      
        
        <tags>
            
            <tag> 瞎扯 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次接口开发]]></title>
      <url>http://beginlu.me/2015/11/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>最开始写这个接口的时候是发现了这个网站登录的一个小 bug，可以不验证验证码来完成登录操作。</p>
<p>然后因为一些原因，网站方面发现了这个bug 并进行了修复。所以我就不得不进行验证码的识别。</p>
<p>写了好了验证码的识别，发现识别成功率也有百分之八十以上，就准备写进接口当中。可是发现还是会一直提示验证码错误，然后我纠结了很久都没有想明白到底是为什么。</p>
<p>然后突然想起来了验证码的验证机制，是通过 Session 来判断的。所以我应当在获取验证码的时候保存 SessionId 然后之后的访问都通过这个 Session 来进行。</p>
<p>总结：好好学后台、、</p>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Navigation的使用]]></title>
      <url>http://beginlu.me/2015/08/10/Android%20Navigation/</url>
      <content type="html"><![CDATA[<p>昨天发现谷歌提供Navigation这么一个东西。可以实现侧滑菜单……</p>
<p>然后看了会文档……不知道是我没看全还是什么原因，感觉文档写的还是挺不错的，但是我也写下好了。</p>
<p>首先。上布局文件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>= <span class="string">http://schemas.android.com/apk/res/android</span></div><div class="line">    <span class="attr">android:id</span>= <span class="string">@+id/drawer_layout</span></div><div class="line">    <span class="attr">android:layout_width</span>= <span class="string">match_parent</span></div><div class="line">    <span class="attr">android:layout_height</span>= <span class="string">match_parent</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:id</span>= <span class="string">@+id/content_frame</span></div><div class="line">        <span class="attr">android:layout_width</span>= <span class="string">match_parent</span></div><div class="line">        <span class="attr">android:layout_height</span>= <span class="string">match_parent</span>  /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>= <span class="string">@+id/left_drawer</span></div><div class="line">        <span class="attr">android:layout_width</span>= <span class="string">240dp</span></div><div class="line">        <span class="attr">android:layout_height</span>= <span class="string">match_parent</span></div><div class="line">        <span class="attr">android:layout_gravity</span>= <span class="string">start</span></div><div class="line">        <span class="attr">android:choiceMode</span>= <span class="string">singleChoice</span></div><div class="line">        <span class="attr">android:divider</span>= <span class="string">@android:color/transparent</span></div><div class="line">        <span class="attr">android:dividerHeight</span>= <span class="string">0dp</span></div><div class="line">        <span class="attr">android:background</span>= <span class="string">#111</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>昂。没错。这就是官方的布局文件。</p>
<p>我要说的就是。这里的ListView可以换成任意的Layout。但是要注意的就是它的宽不要超过320dp。高度必须match_parent</p>
<p>昂。然后你就可以运行了。会有一个侧滑菜单的，但是里面就是黑黑的一片。什么都没有。</p>
<p>然后就是注意一些属性了。</p>
<p>layout_gravity 这个属性<br>昂，其实这个我没太看懂，就直接上官方原话好了。。抽屉视图(视图)必须指定它的水平重力与android:layout_gravity属性。支持从右到左的语言(RTL),指定&#20540;与“开始”而不是“左”(右边的抽屉里出现时,布局是RTL)。</p>
<p>然后关于侧滑菜单里面的一些操作就可以写在Java文件中了。</p>
<p>我在说下FrameLayout的使用好了。</p>
<p>其实这个我还不太懂。只是知道让Activity继承FragmentActivity然后使用如下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FragmentManager fragmentManager =getSupportFragmentManager();</div><div class="line">HomeFragment homeFragment = <span class="keyword">new</span> HomeFragment();</div><div class="line">fragmentManager.beginTransaction().replace(R.id.framelayout, homeFragment).commit();</div></pre></td></tr></table></figure></p>
<p>就可以吧HomeFragment添加到这个FrameLayout里面了。</p>
<p>昂。大概也就这些。哦。还有打开和关闭。。</p>
<p>打开：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mDrawerLayout.openDrawer(mLeftMenu);</div></pre></td></tr></table></figure>
<p>mDrawerLayout就是DrawerLayout这个控件。然后mLeftMent就是ListView这个控件。。</p>
<p>关闭</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mDrawerLayout.closeDrawers();</div></pre></td></tr></table></figure>
<p>示例代码：<a href="http://download.csdn.net/detail/mcdull_lu/8987981" target="_blank" rel="external">点击打开链接</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于开发过程中的一些感想随笔]]></title>
      <url>http://beginlu.me/2015/08/03/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3%E9%9A%8F%E7%AC%94/</url>
      <content type="html"><![CDATA[<p>本来每天都是写一写技术分享的文章的，然而昨天一整天都是在修改UI上的小问题，我就随意写写这次开发过程自己的一些感受好了。</p>
<p>以后我希望我能每次开个项目的时候就写一篇这样的博文。一步步记录下每一天的开发感受。</p>
<p>这次开发算是比较扯淡的了。最开始不紧不慢的慢慢来。最后又出于各种原因赶工。简直累炸我了。</p>
<p>这次算是第一次真正的系统性的去开发一款APP。发现了自己很多问题。</p>
<p>1.代码调理不清晰。后期想修改一个功能，一直出问题。还以为是怎么了。后来才发现。是我自己代码没搞清楚。</p>
<p>2.不懂善用开源框架。自己写的很多功能其实网络上都有开源的框架的。可是我都没有怎么用到。大多数时候都是自己写。写的也很low，所以我要总结一下常用的框架。以便自己以后不再犯傻。</p>
<p>3.基础知识不牢固。怎么说呢。连最基础的Map数组遍历我都要去Google一下。真觉得我也是够可以的了。有必要好好的巩固Java基础。</p>
<h4 id="——2015年8月3号-APP1-0完成后"><a href="#——2015年8月3号-APP1-0完成后" class="headerlink" title="——2015年8月3号 APP1.0完成后"></a>——2015年8月3号 APP1.0完成后</h4><p>哎。我来更新了。本来是该早上起床更新下博客的。可是因为昨天晚上实在太晚睡。然后早上一起床又开始修复bug。所以就没时间来写，其实今天真心累。今天也不知道是什么原因。遇到了很多问题</p>
<p>1.在为很多按钮加上点击效果之后就会出现一个和XML文件有关的异常。好像是没有找到资源文件吧。完全没有任何解决的头绪。Google出来的一些解决方案也是没怎么看懂。</p>
<p>2.OOM。这个真的不想说什么。一开始我以为只有在同一个页面内图片加载量过大才会引起OOM，然后现在更具反馈看了。好像每次finsh()掉界面但是没有释放图片资源。这样的次数多了只会也可能会导致OOM</p>
<p>3.屏幕适配。这个、真晕了。而且遇到一个很奇葩的问题。就是UI那边给我的是1080p的图片文件。我直接随意的放到了hdpi的资源文件夹里。然后就会在ViewPage滑动的时候特别卡。放到xxhdpi的文件夹里就好了。也不知道这是为什么。哈哈哈、</p>
<p>4.dialog。因为很多时候我的会在页面一打开的时候弹出dialog。然后我就会判断页面是否完全打开。如果打开且需要就显示dialog。但是好像在进页面后立刻返回。有概率性的会出现错误。</p>
<p>反正约到了挺多问题的。果然还是应该先好好学习。以后要记住的就是凡是在用到BitMap之后要进行内存释放！！！</p>
<h4 id="——2015年8月4号-APP上线第一天"><a href="#——2015年8月4号-APP上线第一天" class="headerlink" title="——2015年8月4号 APP上线第一天"></a>——2015年8月4号 APP上线第一天</h4><p>昂。我都喜欢后一天的早上更前一天的东西。。这样是不是不太好呀。不过就这样咯。毕竟睡觉之前写的话。。感觉我一下又少了好多睡觉时间呀。要不得要不得。</p>
<p>想想昨天做了些啥。</p>
<p>1.高德地图。居然地图抄的官方Demo还有bug。一个空指针异常的，是地图还没初始化就退出了导致的。加上了判断就解决了。</p>
<p>2.XML文件的一些错误居然在Clean工程之后就解决了。。。好像是重新构建了索引还是连接什么的。不太懂。</p>
<p>3.内存溢出。先是优化了一堆有Bitmap调用的页面。然后又找上美工。把所有的图片给了我三组。1080P。720P。480P三份。然后也好了很多。以后图片都要三份。要三份！</p>
<p>4.发现我的布局文件结构写的好复杂呀。该好好看看文档，看看要不要精简优化下布局文件了。</p>
<p>5.关于ViewPage内存释放的。发现好像我有个地方是五个页面。但是切到第三个的时候第一个的内存并没有被释放掉。。应该是要在Adapter里面做处理的。还好现在页面少。</p>
<p>6.还是XML得问题。我太多的文字都写在布局文件里面了。规范应当是弄到String.Xml文件里面的。也方便做国际化，以后要注意！以后要注意！</p>
<p>好像也就这些了吧。嗯。发现了好多问题。也在慢慢解决问题。O(∩_∩)O哈哈哈~</p>
<h4 id="——2015年8月6号-APP上线第三天"><a href="#——2015年8月6号-APP上线第三天" class="headerlink" title="——2015年8月6号 APP上线第三天"></a>——2015年8月6号 APP上线第三天</h4><p>今天真难过、、肚子痛了一天。昨天晚上一点左右睡的。早上四点多就疼醒了，哎，都是因为没关风扇。还吃不下什么东西，感觉好累昂。</p>
<p>昨天晚上发现谷歌提供了一个Navigation可以做侧滑菜单。哎，我也真是傻，谷歌官方提供的东西居然没有好好地去利用，今天读了一会文档，然后花了几个小时就把项目里面一个用到菜单的地方改成侧滑的了。然后。。有空去把谷歌的一些文档全看一遍好了。。</p>
<p>今天还折腾了会服务器。买了个DO的vps。新加坡节点。感觉还不错。网速可以。还不丢包。。搭好了PHP和JavaWeb的环境。过明天看看做好推送服务的页面挂上去试试。</p>
<p>其实写代码重在细心呀，╮(╯▽╰)╭。今天肚子疼，早点洗洗睡。对自己好一点，么么哒、</p>
<h4 id="——2015年8月10号"><a href="#——2015年8月10号" class="headerlink" title="——2015年8月10号"></a>——2015年8月10号</h4><p>今天弄了个沉浸状态栏。233333.发现原来把布局中相同或相&#20284;的title提出来单独一个xml文件是一个多么棒的决定了。沉浸状态栏画了一个小时不到就弄完了。。。</p>
<p>今天无聊想弄ss的多用户。弄了半天都没弄好。。无奈了。还废了我基本一天的时间。。。还一直以为wdcp的Apache有问题，最后居然发现是因为我自己不会用。。。23333.自己犯傻了。弄的原定今天写好的推送后台都没弄。又只能明天弄了。orz，早睡早起。早睡早起。。</p>
<h4 id="——2015年8月11日"><a href="#——2015年8月11日" class="headerlink" title="——2015年8月11日"></a>——2015年8月11日</h4><p>看了下日期。发现我竟然十天没写过博客了。其实不算久昂。可能是最近太闲了吧。呵呵。我这人一闲起来就什么都不想干。不能闲下来的人呀。</p>
<p>昨天吧。一直在折腾电脑。就是下了很多东西。弄弄分区什么的。但是也基本花了一天时间。哎。下午的时候看到有人反馈了一个蛮严重的bug。。刚弄好东西就赶忙找错。修复。推更新。其实心里总有种怪怪的感觉。哎。不想纠结了。</p>
<p>其实再好好看了下MVC框架。发现自己的代码真low。有空整体得改改。</p>
<h4 id="——2015年8月22日"><a href="#——2015年8月22日" class="headerlink" title="——2015年8月22日"></a>——2015年8月22日</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[开发Android应用时写从图库选择头像功能时遇到的一些问题]]></title>
      <url>http://beginlu.me/2015/08/02/%E5%BC%80%E5%8F%91Android%E5%BA%94%E7%94%A8%E6%97%B6%E5%86%99%E4%BB%8E%E5%9B%BE%E5%BA%93%E9%80%89%E6%8B%A9%E5%A4%B4%E5%83%8F%E5%8A%9F%E8%83%BD%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="——原文——"><a href="#——原文——" class="headerlink" title="——原文——"></a>——原文——</h2><p>首先是最基本的调用图库获取图像的代码。我直接贴出来。也是当个笔记吧。事实是我记不下来。。。</p>
<p>先是调用系统图库</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">intent.setType(&amp;quot;image<span class="comment">/*&amp;quot;);</span></div><div class="line">intent.putExtra(&amp;quot;crop&amp;quot;, true);</div><div class="line">intent.putExtra(&amp;quot;return-data&amp;quot;, true);</div><div class="line">startActivityForResult(intent, 2);</div></pre></td></tr></table></figure>
<p>然后是获取选择到得图片的uri</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == <span class="number">2</span>) &#123;</div><div class="line">            Uri uri = data.getData();</div><div class="line">            ContentResolver cr = <span class="keyword">this</span>.getContentResolver();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Bitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri));</div><div class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就获取到图片了。But。。现在手机都那么好。随随便便一张照片就十几MB、秒秒钟OOM报错呀。</p>
<p>所以接下来我就改了改代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options opts = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">opts.inJustDecodeBounds = <span class="keyword">true</span>;<span class="comment">//指定加载图片方式为只加载头信息</span></div><div class="line">BitmapFactory.decodeStream(cr.openInputStream(uri), <span class="keyword">null</span>, opts);<span class="comment">//将头信息加载到opts中</span></div><div class="line"><span class="comment">//3.计算缩放比例</span></div><div class="line"><span class="keyword">double</span> dx = opts.outWidth/<span class="number">300.0</span>;</div><div class="line"><span class="keyword">double</span> dy = opts.outHeight/<span class="number">300.0</span>;</div><div class="line"><span class="keyword">int</span> scale = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(dx&amp;gt;dy&amp;amp;&amp;amp;dy&amp;gt;<span class="number">1</span>)&#123;</div><div class="line">    System.out.println(&amp;quot;按照水平方法缩放,缩放比例：&amp;quot;+dx);</div><div class="line">    scale = (<span class="keyword">int</span>)(dx+<span class="number">0.5</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dy&amp;gt;dx&amp;amp;&amp;amp;dx&amp;gt;<span class="number">1</span>)&#123;</div><div class="line">    System.out.println(&amp;quot;按照垂直方法缩放,缩放比例：&amp;quot;+dy);</div><div class="line">    scale = (<span class="keyword">int</span>)(dy+<span class="number">0.5</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//4.缩放加载图片到内存。</span></div><div class="line">opts.inSampleSize = scale;</div><div class="line">opts.inJustDecodeBounds = <span class="keyword">false</span>;<span class="comment">//真正的去解析这个位图。</span></div><div class="line">Bitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), <span class="keyword">null</span>, opts);</div></pre></td></tr></table></figure>
<p>这段代码主要是利用图片前面都会带有一段信息是图片信息的。第一次加载仅仅是加载头信息。获取到图片的宽高后再根据宽高来设置缩放比例。以避免OOM</p>
<p>But。这有有问题了。这样缩放是等比缩放。然后头像一般都是正方形的。然而我帅气的自拍是长方形的呀。我处女座就不能忍那两边留有的空白了。</p>
<p>于是我默默地弄了两种处理方式：</p>
<p>1.拉伸。。。</p>
<p>就是吧图片拉伸成正方形</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> width = bitmap.getWidth();</div><div class="line"><span class="keyword">int</span> height = bitmap.getHeight();</div><div class="line"><span class="comment">// 计算缩放比例</span></div><div class="line"><span class="keyword">float</span> scaleWidth = ((<span class="keyword">float</span>) <span class="number">300</span>) / width;</div><div class="line"><span class="keyword">float</span> scaleHeight = ((<span class="keyword">float</span>) <span class="number">300</span>) / height;</div><div class="line"><span class="comment">// 取得想要缩放的matrix参数</span></div><div class="line">Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">matrix.postScale(scaleWidth, scaleHeight);</div><div class="line"><span class="comment">// 得到新的图片</span></div><div class="line">Bitmap bitmap = Bitmap.createBitmap(bitmap, <span class="number">0</span>, <span class="number">0</span>, width, height, matrix, <span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>写好测试后我立马就疯了。这拉伸。哎。不能放在头像功能这。把我帅气的自拍弄得太丑了。简直不能忍，</p>
<p>2.截取部分图片。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> width = bitmap.getWidth();</div><div class="line"><span class="keyword">int</span> height = bitmap.getHeight();</div><div class="line"><span class="keyword">if</span> (width&amp;gt;height)&#123;</div><div class="line">    Bitmap bitmap = Bitmap.createBitmap(bitmap,(width-height)/<span class="number">2</span>,<span class="number">0</span>,height,height);</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">    Bitmap bitmap = Bitmap.createBitmap(bitmap,<span class="number">0</span>,(height-width)/<span class="number">2</span>,width,width);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就成功从图片中间截取正方形部分出来了。恩。爽多了。其实这个功能可以改改的。让用户自己从图片上选取正方形部分出来。昂。我是想可以这么做的。But。还没这么干。回头写好了再贴出来吧。</p>
<p>PS：以上观点仅仅是作者自己的想法。如果有更好的处理方案什么的。欢迎各位指出。谢谢谢谢谢、</p>
<h2 id="——2016-1-23号更新——"><a href="#——2016-1-23号更新——" class="headerlink" title="——2016-1-23号更新——"></a>——2016-1-23号更新——</h2><p>发现了一种更好的调用系统图库获取图片并裁剪的方法.</p>
<p>1.首先依然是调用系统图库并要求返回图片数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PICK, <span class="keyword">null</span>);</div><div class="line">intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,<span class="string">"image/*"</span>);</div><div class="line">startActivityForResult(intent, PHOTO_REQUEST_GALLERY);</div></pre></td></tr></table></figure></p>
<p>2.依然是通过onActivityResult来获取到返回的数据<br>这里因为会涉及到图片裁剪.所以需要做一下返回数据的判断.在上面获取图片的时候有进行标记 ‘PHOTO_REQUEST_GALLERY’ 这表示返回的是选择后的图片.还一个是 ‘PHOTO_REQUEST_CUT’ 这表示获取到裁剪后的图片.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">    <span class="keyword">case</span> PHOTO_REQUEST_GALLERY:</div><div class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">            startPhotoZoom(data.getData(), <span class="number">150</span>); <span class="comment">//调用裁剪图片的方法</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> PHOTO_REQUEST_CUT:</div><div class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">            setPicToView(data);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.startPhotoZoom(Uri uri, int size)方法.是根据数据和设定的 size 大小来要求用户裁剪图片.调用系统自带的裁剪图片的页面.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.android.camera.action.CROP"</span>);</div><div class="line">intent.setDataAndType(uri, <span class="string">"image/*"</span>);</div><div class="line"><span class="comment">// crop为true是设置在开启的intent中设置显示的view可以剪裁</span></div><div class="line">intent.putExtra(<span class="string">"crop"</span>, <span class="string">"true"</span>);</div><div class="line"></div><div class="line"><span class="comment">// aspectX aspectY 是宽高的比例</span></div><div class="line">intent.putExtra(<span class="string">"aspectX"</span>, <span class="number">1</span>);</div><div class="line">intent.putExtra(<span class="string">"aspectY"</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// outputX,outputY 是剪裁图片的宽高</span></div><div class="line">intent.putExtra(<span class="string">"outputX"</span>, size);</div><div class="line">intent.putExtra(<span class="string">"outputY"</span>, size);</div><div class="line">intent.putExtra(<span class="string">"return-data"</span>, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">startActivityForResult(intent, PHOTO_REQUEST_CUT);</div></pre></td></tr></table></figure></p>
<p>4.获取到返回的数据进行在 2 中介绍到了<br>5.从 data 中获取数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Bundle bundle = picdata.getExtras();</div><div class="line"><span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</div><div class="line">    bmp = bundle.getParcelable(<span class="string">"data"</span>);<span class="comment">//获取到图片</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不得不说的是,通过这样的方法来获取图片的话.三星手机也能够正常获取了.PS:我真的不是在黑三星.</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用PopupWindow的遇到的一些小问题]]></title>
      <url>http://beginlu.me/2015/08/01/%E4%BD%BF%E7%94%A8PopupWindow%E7%9A%84%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>记得第一次使用PopupWindow是写一个按钮点击后弹出菜单的小玩意。那时候最纠结的就是PopupWindow显示的位置总是不尽人意。那时候试过这些方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 相对某个控件的位置（正左下方），无偏移量</span></div><div class="line">PopupWindow.showAsDropDown(View anchor)</div><div class="line"><span class="comment">// 相对某个控件的位置，有偏移，xoff 为 X 轴的偏移量，yoff 为 Y 轴的偏移量                          </span></div><div class="line">PopupWindow.showAsDropDown(View anchor, <span class="keyword">int</span> xoff, <span class="keyword">int</span> yoff)</div><div class="line"><span class="comment">// 在父容器的什么位置，gravity 为相对位置，如：正中央 Gravity.CENTER、下方 Gravity.BOTTOM、Gravity.RIGHT|Gravity.BOTTOM 右下方等，后面两个参数为 x/y 轴的偏移量。</span></div><div class="line">PopupWindow.showAtLocation(View parent, <span class="keyword">int</span> gravity, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</div></pre></td></tr></table></figure>
<p>虽然最后是成功解决了问题。但是感觉有些时候使用起来很麻烦。因为需要通过父容器以及PopupWindow自身的大小来进行计算偏移量。最后的我解决方案是直接将PopupWindow的大小设置为全屏。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Rect outRect = <span class="keyword">new</span> Rect();</div><div class="line">getWindow().getDecorView().getWindowVisibleDisplayFrame(outRect);<span class="comment">//获取屏幕的大小</span></div><div class="line">PopupWindow popupWindow = <span class="keyword">new</span> PopupWindow(view, outRect.width(), outRect.height());<span class="comment">//设置PopupWindow的大小为除通知栏之外的全屏幕</span></div><div class="line">popupWindow.showAsDropDown(View.inflate(<span class="keyword">this</span>, R.layout.activity, <span class="keyword">null</span>), <span class="number">0</span>, outRect.top);<span class="comment">//设置PopupWindow的显示位置为除通知栏的全屏幕</span></div></pre></td></tr></table></figure>
<p>这时候要注意的是。你设置成全屏大小了。不可能全屏都是你的菜单吧。所以要在空白部分放上一个空的View。还要加上点击事件。直接调用dismiss方法。以达到使PopupWindow关闭的目的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">view.findViewById(R.id.view).setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        popupWindow.dismiss();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这下就爽了。然后很多时候我也喜欢这么用了。因为我可以很任性的设置PopupWindow所该存在的位置。但是有有问题了。。就是对于类&#20284;一个ListView里面的Item点击弹出PopupWindow的。。因为弹出的PopupWindow一样。但是位置不一样。于是。我又老老实实的用回了相对位置的方法。。当然，使用的时候要学会具体情况具体分析昂。</p>
<p>然后是一些关于PopupWindow我遇到的一些小问题的解决方法：</p>
<p>PopupWindow打开和关闭动画：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">popupWindow.setAnimationStyle(R.style.AnimationPreview);<span class="comment">//设置动画文件</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>= <span class="string">AnimationPreview</span> &gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>= <span class="string">android:windowEnterAnimation</span> &gt;</span>@anim/show_win_in<span class="tag">&lt;/<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">--打开动画--</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>= <span class="string">android:windowExitAnimation</span> &gt;</span>@anim/show_win_out<span class="tag">&lt;/<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">--关闭动画--</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>show_win_in和show_win_out里面就是最基本的动画资源文件了。</p>
<p>PopupWindow中ListView点击无响应：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">popupWindow.setFocusable(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
